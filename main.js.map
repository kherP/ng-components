{"version":3,"sources":["webpack:////Users/rhj/Dev/sebgroup/ng-components/lib/src/button/button.module.ts","webpack:////Users/rhj/Dev/sebgroup/ng-components/lib/src/button/button.ts","webpack:////Users/rhj/Dev/sebgroup/ng-components/lib/src/button/index.ts","webpack:////Users/rhj/Dev/sebgroup/ng-components/lib/src/button/public_api.ts","webpack:///./src/app/examples/components/buttons/examples/buttons/buttons.component.html","webpack:///./src/app/examples/components/buttons/examples/buttons/buttons.component.ts?6d69","webpack:///./src/app/examples/components/modal/examples/modal/modal.component.html","webpack:///./src/app/examples/components/modal/examples/modal/modal.component.ts?09be","webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/example-page/api-list/api-list.component.html","webpack:///./src/app/components/example-page/api-list/api-list.component.scss","webpack:///./src/app/components/example-page/api-list/api-list.component.ts","webpack:///./src/app/components/example-page/example-list/example-list.component.html","webpack:///./src/app/components/example-page/example-list/example-list.component.scss","webpack:///./src/app/components/example-page/example-list/example-list.component.ts","webpack:///./src/app/components/example-page/example-list/example-template/example-template.component.html","webpack:///./src/app/components/example-page/example-list/example-template/example-template.component.ts","webpack:///./src/app/components/example-page/example-list/example-template/example.query.ts","webpack:///./src/app/components/example-page/example-list/example-template/example.service.ts","webpack:///./src/app/components/example-page/example-list/example-template/example.store.ts","webpack:///./src/app/components/example-page/example-page.component.html","webpack:///./src/app/components/example-page/example-page.component.scss","webpack:///./src/app/components/example-page/example-page.component.ts","webpack:///./src/app/components/header/header.component.html","webpack:///./src/app/components/header/header.component.scss","webpack:///./src/app/components/header/header.component.ts","webpack:///./src/app/components/installation/installation.component.html","webpack:///./src/app/components/installation/installation.component.scss","webpack:///./src/app/components/installation/installation.component.ts","webpack:///./src/app/components/logo/logo.component.html","webpack:///./src/app/components/logo/logo.component.scss","webpack:///./src/app/components/logo/logo.component.ts","webpack:///./src/app/components/menu/menu.query.ts","webpack:///./src/app/components/menu/menu.service.ts","webpack:///./src/app/components/menu/menu.store.ts","webpack:///./src/app/components/menu/side-menu.component.html","webpack:///./src/app/components/menu/side-menu.component.scss","webpack:///./src/app/components/menu/side-menu.component.ts","webpack:///./src/app/examples/components/buttons/buttons.module.ts","webpack:///./src/app/examples/components/buttons/examples/buttons/buttons.component.scss","webpack:///./src/app/examples/components/buttons/examples/buttons/buttons.component.ts","webpack:///./src/app/examples/components/modal/examples/modal/modal.component.scss","webpack:///./src/app/examples/components/modal/examples/modal/modal.component.ts","webpack:///./src/app/examples/components/modal/modal.module.ts","webpack:///./src/app/examples/examples.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SebButtonDirective} from './button';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SebButtonDirective],\n  exports: [SebButtonDirective]\n})\nexport class SebButtonModule { }\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input\n} from '@angular/core';\n\n\nexport type SebButtonType = 'primary' | 'secondary' | 'link' | 'light';\nexport type SebButtonSize = 'lg' | 'sm' | null;\n\n@Directive({\n  selector: 'button[seb-btn], a[seb-btn], span[seb-btn], input[seb-btn]',\n  host: {\n    '[class.btn-lg]' : 'size === \"lg\"',\n    '[class.btn-sm]' : 'size === \"sm\"'\n  }\n})\nexport class SebButtonDirective {\n\n  @HostBinding('class.btn') _btn = true;\n  @HostBinding('attr.disabled') _disabled = null;\n\n  @Input('seb-btn')\n  get type(): SebButtonType {\n    return this._type;\n  }\n\n  set type(value: SebButtonType) {\n    if (value && value !== this._type) {\n      this._removeClasses();\n      this._type = value;\n      this._setClasses();\n    }\n  }\n\n  private _type: SebButtonType = 'primary';\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = `${value}` === 'true' ? true : null;\n  }\n\n  @Input()\n  get outline(): boolean {\n    return this._outline;\n  }\n\n  set outline(value: boolean) {\n\n    value = value != null && `${value}` !== 'false';\n\n    if (this._outline !== value) {\n      this._removeClasses();\n      this._outline = value;\n      this._setClasses();\n    }\n  }\n\n  private _outline: boolean = false;\n\n  @Input()\n  get size(): SebButtonSize {\n    return this._size;\n  }\n\n  set size(value: SebButtonSize) {\n      this._size = value;\n  }\n\n  private _size: SebButtonSize = null;\n\n  constructor(public elementRef: ElementRef) {\n    this._setClasses();\n  }\n\n  private _setClasses() {\n    const styleClass = this.outline ? `btn-outline-${this.type}` : `btn-${this.type}`;\n    this.elementRef.nativeElement.classList.add(styleClass);\n  }\n\n  public _removeClasses() {\n    const styleClass = this.outline ? `btn-outline-${this.type}` : `btn-${this.type}`;\n    this.elementRef.nativeElement.classList.remove(styleClass);\n  }\n}\n","export * from './public_api';\n","export * from './button.module';\nexport * from './button';\n","module.exports = \"<button seb-btn>Primary</button>\\n<button seb-btn outline>Outlined</button>\\n<button seb-btn=\\\"secondary\\\">Secondary</button>\\n<button seb-btn=\\\"light\\\">Light</button>\\n<button seb-btn=\\\"link\\\">Link</button>\\n<button seb-btn size=\\\"sm\\\">Primary</button>\\n<button seb-btn size=\\\"sm\\\" disabled=\\\"true\\\">Disabled</button>\\n\\n\"","module.exports = \"import { Component, OnInit } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-buttons',\\n  templateUrl: './buttons.component.html',\\n  styleUrls: ['./buttons.component.scss']\\n})\\nexport class ButtonsComponent implements OnInit {\\n\\n  constructor() { }\\n\\n  ngOnInit() {\\n  }\\n\\n}\\n\"","module.exports = \"<div class=\\\"modal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\">\\n  <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">Modal title</h5>\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <p>Modal body text goes here.</p>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Close</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Save changes</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"import { Component, OnInit } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-modal',\\n  templateUrl: './modal.component.html',\\n  styleUrls: ['./modal.component.scss']\\n})\\nexport class ModalComponent implements OnInit {\\n\\n  constructor() { }\\n\\n  ngOnInit() {\\n  }\\n\\n}\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {ROUTES as BUTTONS_ROUTES} from './examples/components/buttons/buttons.module';\nimport {ROUTES as MODAL_ROUTES} from './examples/components/modal/modal.module';\nimport {InstallationComponent} from './components/installation/installation.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'get-started',\n    data: {\n      icon: 'home'\n    },\n    children: [{\n      path: '',\n      redirectTo: 'install',\n      pathMatch: 'full'\n    }, {\n      path: 'installation',\n      component: InstallationComponent\n    }]\n  }, {\n    path: 'components',\n    data: {\n      icon: 'cubes'\n    },\n    children: [{\n      path: '',\n      redirectTo: 'buttons',\n      pathMatch: 'full'\n    }, {\n      path: 'buttons',\n      children: BUTTONS_ROUTES\n    }, {\n      path: 'modal',\n      children: MODAL_ROUTES\n    }]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<!--<app-navigation-bar></app-navigation-bar>-->\\n<!--<app-mobile-navigation></app-mobile-navigation>\\n<app-side-navigation></app-side-navigation>-->\\n<ng-container *ngIf=\\\"!($isFullscreen | async)\\\">\\n  <app-header></app-header>\\n  <app-side-menu></app-side-menu>\\n</ng-container>\\n<!--<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row no-gutters\\\">\\n    <div class=\\\"col-auto\\\">\\n      <app-menu-navigation></app-menu-navigation>\\n    </div>\\n    <div class=\\\"col\\\">\\n      <router-outlet></router-outlet>\\n    </div>\\n  </div>\\n</div>-->\\n<div (window:scroll)=\\\"scroll($event)\\\" style=\\\"z-index: 0;\\\" [ngClass]=\\\"{'content': !($isFullscreen | async)}\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n      <div class=\\\"mx-auto mt-5 mt-lg-0 pt-3 pt-lg-0\\\" style=\\\"max-width: 920px\\\">\\n        <router-outlet></router-outlet>\\n        <div *ngIf=\\\"!($isFullscreen | async)\\\" class=\\\"py-3 text-center\\\">Version: <a href=\\\"{{'https://github.com/sebgroup/bootstrap/releases/' + versionLink}}\\\" target=\\\"_blank\\\" class=\\\"mr-3\\\">{{version}}</a>Build: {{travis_build_number}} </div>\\n      </div>\\n    </div>\\n  </div>\\n  <!--<app-sub-header [scrollPosition]=\\\"scrollPosition\\\"></app-sub-header>-->\\n\\n</div>\\n\"","module.exports = \"/**\\n * Add one or more transitions\\n *\\n * @example\\n * @include add-transition('slideInUp');\\n * @include add-transition(('slideInUp','fadeIn'))\\n */\\n@media (min-width: 992px) {\\n  .content {\\n    margin-left: 16rem; } }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import {Component, OnInit} from '@angular/core';\nimport { FaIconService } from '@fortawesome/angular-fontawesome';\nimport { environment } from '../environments/environment';\nimport {Route, Router} from '@angular/router';\nimport {MenuService} from './components/menu/menu.service';\nimport {share} from 'rxjs/operators';\nimport {ExampleQuery} from './components/example-page/example-list/example-template/example.query';\nimport {Observable} from 'rxjs';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  scrollPosition: number;\n  $isFullscreen: Observable<boolean>;\n  travis_build_number: string = environment.travis_build_number;\n  version: string = (environment.version === '0.0.0-semantically-released' || environment.version === 'n/a') ?\n    'unreleased dev version' : environment.version;\n  versionLink: string = (environment.version === '0.0.0-semantically-released' || environment.version === 'n/a') ?\n    'latest' : 'tag/v' + environment.version;\n\n  constructor(private faIconService: FaIconService,\n              private router: Router,\n              private menuService: MenuService,\n              private exampleQuery: ExampleQuery) {\n    this.faIconService.defaultPrefix = 'fal';\n  }\n\n  ngOnInit(): void {\n    const menuItems: any = this.router.config.reduce((prev: any, current: Route) => {\n      const menuGroup = {\n        text: current.path,\n        icon: current.data.icon,\n        children: current.children\n          .filter(child => child.path.length > 1)\n          .map( child => {\n            return {\n              text: child.path,\n              path: current.path + '/' + child.path\n            };\n          })\n      };\n      return [...prev, {...menuGroup}];\n    }, []);\n    this.menuService.updateMenuItems(menuItems);\n    this.$isFullscreen = this.exampleQuery.$isFullscreen\n      .pipe(\n        share()\n      );\n  }\n\n  scroll($event) {\n    this.scrollPosition = $event.target.scrollingElement.scrollTop;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { SideMenuComponent } from './components/menu/side-menu.component';\nimport { ExamplePageComponent } from './components/example-page/example-page.component';\nimport { ExamplesModule } from './examples/examples.module';\nimport { HeaderComponent } from './components/header/header.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { faTimes } from '@fortawesome/pro-light-svg-icons/faTimes';\nimport { faList } from '@fortawesome/pro-light-svg-icons/faList';\nimport { LogoComponent } from './components/logo/logo.component';\nimport { faBars } from '@fortawesome/pro-light-svg-icons/faBars';\nimport { ExampleListComponent } from './components/example-page/example-list/example-list.component';\nimport {\n  ExampleTemplateComponent,\n  CodeExampleDirective} from './components/example-page/example-list/example-template/example-template.component';\nimport {faCode} from '@fortawesome/pro-light-svg-icons/faCode';\nimport { faHome } from '@fortawesome/pro-light-svg-icons/faHome';\nimport { faCubes } from '@fortawesome/pro-light-svg-icons/faCubes';\nimport { ExemplifyModule } from 'angular-exemplify';\nimport { ApiListComponent } from './components/example-page/api-list/api-list.component';\nimport { faExpandWide } from '@fortawesome/pro-light-svg-icons/faExpandWide';\nimport { InstallationComponent } from './components/installation/installation.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SideMenuComponent,\n    ExamplePageComponent,\n    HeaderComponent,\n    LogoComponent,\n    ExampleListComponent,\n    CodeExampleDirective,\n    ExampleTemplateComponent,\n    ApiListComponent,\n    InstallationComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    FontAwesomeModule,\n    ExemplifyModule,\n    ExamplesModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor() {\n    library.add(faList);\n    library.add(faTimes);\n    library.add(faBars);\n    library.add(faCode);\n    library.add(faHome);\n    library.add(faCubes);\n    library.add(faExpandWide);\n  }\n}\n","module.exports = \"<p>\\n  Api description should be placed here!\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9uZy1jb21wb25lbnRzLWRvY3Mvc3JjL2FwcC9jb21wb25lbnRzL2V4YW1wbGUtcGFnZS9hcGktbGlzdC9hcGktbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-api-list',\n  templateUrl: './api-list.component.html',\n  styleUrls: ['./api-list.component.scss']\n})\nexport class ApiListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n","module.exports = \"<ng-container *ngIf=\\\"$content | async as examples\\\">\\n  <ng-container *ngIf=\\\"!($showOutlet | async)\\\">\\n    <div *ngFor=\\\"let example of examples\\\" class=\\\"example\\\">\\n      <app-example-template [example]=\\\"example\\\"></app-example-template>\\n    </div>\\n  </ng-container>\\n  <div [hidden]=\\\"!$showOutlet | async\\\">\\n    <router-outlet\\n      (activate)=\\\"onActivate($event)\\\"\\n      (deactivate)=\\\"onDeactivate($event)\\\"></router-outlet>\\n  </div>\\n</ng-container>\\n\"","module.exports = \"/**\\n * Add one or more transitions\\n *\\n * @example\\n * @include add-transition('slideInUp');\\n * @include add-transition(('slideInUp','fadeIn'))\\n */\\n.example + .example {\\n  border-top: solid #dedede 1px;\\n  margin-top: 1rem;\\n  padding-top: 1rem; }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute } from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {ExampleService} from './example-template/example.service';\nimport {ExampleQuery} from './example-template/example.query';\nimport {share} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-example-list',\n  templateUrl: './example-list.component.html',\n  styleUrls: ['./example-list.component.scss']\n})\nexport class ExampleListComponent implements OnInit {\n\n  $content: Observable<any>;\n  constructor(private route: ActivatedRoute,\n              private exampleService: ExampleService,\n              private exampleQuery: ExampleQuery\n\n  ) { }\n  $showOutlet: Observable<boolean>;\n\n  onActivate(event: any) {\n    setTimeout(() => this.exampleService.setFullscreen(true));\n  }\n\n  onDeactivate(event: any) {\n    setTimeout(() => this.exampleService.setFullscreen(false));\n  }\n  ngOnInit() {\n    /*this.$content = this.route.data.pipe(\n      map(data => Object.keys(data).map( key => data[key]))\n    );*/\n    this.$showOutlet = this.exampleQuery.$isFullscreen\n      .pipe(\n        share()\n      );\n    this.$content = of(this.route.routeConfig.children);\n  }\n}\n","module.exports = \"<div class=\\\"row no-gutters py-3 align-items-end\\\">\\n  <div class=\\\"col-12 col-sm pr-sm-3\\\">\\n    <h3>{{example.data.title}}</h3>\\n    <p class=\\\"mb-sm-0\\\" [innerHTML]=\\\"example.data.description\\\"></p>\\n  </div>\\n  <div class=\\\"col col-sm-auto pr-1\\\">\\n    <button class=\\\"btn btn-outline-primary btn-sm w-100\\\" (click)=\\\"toggleCodeExample()\\\" [ngClass]=\\\"{'active': showCodeExample}\\\">\\n      Code\\n      <fa-icon icon=\\\"code\\\" class=\\\"ml-1\\\"></fa-icon>\\n    </button>\\n  </div>\\n  <div class=\\\"col col-sm-auto px-1\\\">\\n    <button class=\\\"btn btn-outline-primary btn-sm w-100\\\">\\n      Stackblitz\\n      <svg class=\\\"ml-1\\\" width=\\\"23\\\" height=\\\"34\\\" viewBox=\\\"0 0 23 34\\\"\\n           xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <g class=\\\"icon\\\" fill=\\\"currentColor\\\"\\n           fill-rule=\\\"nonzero\\\" id=\\\"Symbols\\\">\\n          <polygon\\n            id=\\\"Path\\\"\\n            points=\\\"0 19.9187087 9.87007874 19.9187087 4.12007874 34 23 13.9612393 13.0846457 13.9612393 18.7893701 0\\\">\\n          </polygon>\\n        </g>\\n      </svg>\\n    </button>\\n  </div>\\n  <div class=\\\"col col-sm-auto pl-1\\\">\\n    <button class=\\\"btn btn-outline-primary btn-sm w-100\\\" [routerLink]=\\\"example.path\\\">\\n      Fullscreen\\n      <fa-icon icon=\\\"expand-wide\\\" class=\\\"ml-1\\\"></fa-icon>\\n    </button>\\n  </div>\\n</div>\\n<div *ngIf=\\\"example.data.sources && showCodeExample\\\" [@enterAnimation]>\\n  <exemplify [sources]=\\\"example.data.sources\\\"></exemplify>\\n  <hr class=\\\"mt-0\\\">\\n</div>\\n<div class=\\\"bg-light p-3\\\">\\n  <ng-template appCodeExample></ng-template>\\n</div>\\n\\n\"","import {ComponentFactoryResolver, ComponentRef, Directive, OnDestroy, ViewChild, ViewContainerRef} from '@angular/core';\n\n@Directive({\n  selector: '[appCodeExample]',\n})\nexport class CodeExampleDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\nimport {Component, Input, OnInit} from '@angular/core';\nimport {animate, style, transition, trigger} from '@angular/animations';\n\n@Component({\n  selector: 'app-example-template',\n  templateUrl: './example-template.component.html',\n  animations: [\n    trigger(\n      'enterAnimation', [\n        transition(':enter', [\n          style({transform: 'translate3d(-1rem,0,0)', opacity: 0}),\n          animate('300ms ease-out', style({transform: 'translate3d(0,0,0)', opacity: 1}))\n        ]),\n        transition(':leave', [\n          style({transform: 'translate3d(0,0,0)', opacity: 1}),\n          animate('300ms ease-out', style({transform: 'translate3d(-1rem,0,0)', opacity: 0}))\n        ])\n      ]\n    )\n  ],\n  styles: [`\n    svg, fa-icon::ng-deep svg {\n      height: 1rem;\n      width: auto !important;\n      vertical-align: middle;\n    }\n  `]\n})\nexport class ExampleTemplateComponent implements OnInit, OnDestroy {\n  get example(): any {\n    return this._example;\n  }\n\n  @Input() set example(value: any) {\n    this._example = value;\n  }\n\n  componentRef: ComponentRef<any>;\n  @ViewChild(CodeExampleDirective) exampleHost: CodeExampleDirective;\n\n  private _example: any;\n  public showCodeExample = false;\n\n  constructor(private resolver: ComponentFactoryResolver) { }\n\n  toggleCodeExample() {\n    this.showCodeExample = !this.showCodeExample;\n  }\n  ngOnInit() {\n    const factory = this.resolver.resolveComponentFactory(this._example.component);\n    const viewContainerRef = this.exampleHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent(factory);\n  }\n\n  ngOnDestroy(): void {\n    this.componentRef.destroy();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { ExampleStore, ExampleState } from './example.store';\n\n@Injectable({ providedIn: 'root' })\nexport class ExampleQuery extends Query<ExampleState> {\n\n  $isFullscreen = this.select('isFullscreen');\n\n  constructor(protected store: ExampleStore) {\n    super(store);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ExampleStore } from './example.store';\n\n@Injectable({ providedIn: 'root' })\nexport class ExampleService {\n\n  constructor(private exampleStore: ExampleStore) {\n  }\n\n  setFullscreen(isFullscreen: boolean) {\n    this.exampleStore.update(_ => ({\n      isFullscreen\n    }));\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface ExampleState {\n   isFullscreen: boolean;\n}\n\nexport function createInitialState(): ExampleState {\n  return {\n    isFullscreen: false\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'example' })\nexport class ExampleStore extends Store<ExampleState> {\n\n  constructor() {\n    super(createInitialState());\n  }\n\n}\n\n","module.exports = \"\\n<h2 class=\\\"text-capitalize mt-3 mt-lg-4\\\" *ngIf=\\\"!($isFullscreen | async)\\\">{{$heading | async}}</h2>\\n<section class=\\\"mt-2 mt-lg-3\\\" [ngClass]=\\\"{'card mx-n3 mx-sm-0': !($isFullscreen | async)}\\\">\\n  <div [ngClass]=\\\"{'card-body': !($isFullscreen | async)}\\\">\\n    <ul class=\\\"nav nav-tabs my-3\\\" *ngIf=\\\"!($isFullscreen | async)\\\">\\n      <li *ngFor=\\\"let menuItem of $menuItems | async\\\" class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link text-capitalize\\\" [routerLink]=\\\"menuItem.path\\\" [routerLinkActive]=\\\"'active'\\\">{{menuItem.path}}</a>\\n      </li>\\n    </ul>\\n    <router-outlet></router-outlet>\\n  </div>\\n</section>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9uZy1jb21wb25lbnRzLWRvY3Mvc3JjL2FwcC9jb21wb25lbnRzL2V4YW1wbGUtcGFnZS9leGFtcGxlLXBhZ2UuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {Observable, ReplaySubject} from 'rxjs';\nimport {MenuItem} from '../../interfaces/menu-item';\nimport {ExampleQuery} from './example-list/example-template/example.query';\nimport {share} from 'rxjs/operators';\n\n@Component({\n  templateUrl: './example-page.component.html',\n  styleUrls: ['./example-page.component.scss']\n})\nexport class ExamplePageComponent implements OnInit {\n  public $menuItems: ReplaySubject<Array<MenuItem>> = new ReplaySubject(0);\n  public $heading: ReplaySubject<string> = new ReplaySubject(0);\n  $isFullscreen: Observable<boolean>;\n\n  constructor(private route: ActivatedRoute, private exampleQuery: ExampleQuery) { }\n\n  ngOnInit() {\n    const menuItems = this.route.routeConfig.children.map(route => {\n      return {\n        text: route.path,\n        path: route.path\n      };\n    });\n    this.$isFullscreen = this.exampleQuery.$isFullscreen\n      .pipe(\n        share()\n      );\n    this.$heading.next(this.route.parent.routeConfig.path);\n    this.$menuItems.next(menuItems);\n  }\n}\n","module.exports = \"<header class=\\\"col-12 d-lg-none bg-white\\\">\\n  <div class=\\\"row justify-content-between justify-content-lg-end h-100\\\">\\n    <div class=\\\"col col-md-auto d-none d-md-flex brand\\\">\\n      <div class=\\\"row mobile-header\\\">\\n        <div class=\\\"col-auto px-0\\\">\\n          <app-logo></app-logo>\\n        </div>\\n        <div class=\\\"col-auto align-self-center text-center px-3\\\" (click)=\\\"toggleMenu()\\\">\\n          <fa-icon icon=\\\"bars\\\" class=\\\"d-block text-white\\\" size=\\\"1x\\\"></fa-icon>\\n          <div>Menu</div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col d-md-none px-0\\\" *ngIf=\\\"activeTab\\\">\\n      <div class=\\\"row mobile-header h-100 align-items-center text-center no-gutters\\\">\\n        <div *ngFor=\\\"let menuItem of $menuItems | async\\\" class=\\\"col\\\" ngClass=\\\"{{activeTab === menuItem.path ? 'active':''}}\\\" (click)=\\\"showMenu(menuItem.path)\\\">\\n          <fa-icon [icon]=\\\"menuItem.icon\\\" size=\\\"1x\\\" class=\\\"d-block\\\"></fa-icon>\\n          <span class=\\\"text-capitalize\\\">{{menuItem.text}}</span>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col align-self-center pl-3 d-none d-sm-flex\\\">\\n      <h3 class=\\\"mb-0\\\">ng-components</h3>\\n    </div>\\n    <div class=\\\"col d-none d-md-flex bg-white border-bottom sticky-header\\\" [@scrollAnimation]=\\\"stickyHeader\\\">\\n      <div class=\\\"row align-items-center h-100\\\">\\n        <div class=\\\"col\\\">\\n          <h5 class=\\\"mb-0\\\">Section header</h5>\\n          <ol class=\\\"breadcrumb mb-0 pl-0 py-0\\\">\\n            <li class=\\\"breadcrumb-item\\\"><a href=\\\"#\\\">Home</a></li>\\n            <li class=\\\"breadcrumb-item active\\\">Section header</li>\\n          </ol>\\n        </div>\\n        <div class=\\\"col-auto\\\">\\n          <div class=\\\"card-menu-control\\\"></div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</header>\\n\"","module.exports = \"/**\\n * Add one or more transitions\\n *\\n * @example\\n * @include add-transition('slideInUp');\\n * @include add-transition(('slideInUp','fadeIn'))\\n */\\nheader {\\n  height: 56px;\\n  position: fixed;\\n  z-index: 1020;\\n  left: 0; }\\n.brand, .profile, .mobile-header {\\n  background: #333;\\n  color: #fff;\\n  height: 56px; }\\n.seb-logo {\\n  height: 56px;\\n  width: 56px; }\\n@media (min-width: 576px) {\\n  header {\\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.15); } }\\n@media (min-width: 992px) {\\n  header {\\n    width: calc(100% - 16rem);\\n    left: 16rem; } }\\n.mobile-header .col {\\n  padding-top: .25rem;\\n  padding-bottom: .25rem; }\\n.mobile-header .active {\\n  background: #60cd18; }\\n.dropdown-toggle {\\n  padding-top: 0.25rem;\\n  padding-bottom: 0.25rem;\\n  cursor: pointer; }\\n.dropdown-toggle::after {\\n  display: none; }\\n.dropdown.show {\\n  background: #41B0EE; }\\n.dropdown-item-link {\\n  padding: 0.5rem 1.5rem; }\\n.breadcrumb-container {\\n  height: 56px; }\\n.dropdown-header {\\n  color: #343434;\\n  background: #dedede; }\\n.dropdown-menu .dropdown-header:first-child {\\n  border-radius: 4px 4px 0 0; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yaGovRGV2L3NlYmdyb3VwL25nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL0BzZWJncm91cC9ib290c3RyYXAvc2Nzcy9taXhpbnMvX2FuaW1hdGlvbnMuc2NzcyIsInByb2plY3RzL25nLWNvbXBvbmVudHMtZG9jcy9zcmMvYXBwL2NvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5jb21wb25lbnQuc2NzcyIsIi9Vc2Vycy9yaGovRGV2L3NlYmdyb3VwL25nLWNvbXBvbmVudHMvcHJvamVjdHMvbmctY29tcG9uZW50cy1kb2NzL3NyYy9hcHAvY29tcG9uZW50cy9oZWFkZXIvaGVhZGVyLmNvbXBvbmVudC5zY3NzIiwiL1VzZXJzL3Joai9EZXYvc2ViZ3JvdXAvbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQHNlYmdyb3VwL2Jvb3RzdHJhcC9zY3NzL192YXJpYWJsZXMuc2NzcyIsIi9Vc2Vycy9yaGovRGV2L3NlYmdyb3VwL25nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL0BzZWJncm91cC9ib290c3RyYXAvc2Nzcy9ib290c3RyYXAtY29yZS9taXhpbnMvX2JyZWFrcG9pbnRzLnNjc3MiLCIvVXNlcnMvcmhqL0Rldi9zZWJncm91cC9uZy1jb21wb25lbnRzL3Byb2plY3RzL25nLWNvbXBvbmVudHMtZG9jcy9zcmMvdmFyaWFibGVzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0RBOzs7Ozs7RUN6REU7QUNGRjtFQUNFLFlBQVk7RUFDWixlQUFlO0VBQ2YsYUM4VnNDO0VEN1Z0QyxPQUFPLEVBQUE7QUFHVDtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsWUFBVyxFQUFBO0FBR2I7RUFDRSxZQUFXO0VBQ1gsV0FBVyxFQUFBO0FFeUNUO0VGdENGO0lBRUUsMENBQXVDLEVBQUEsRUFDeEM7QUVtQ0M7RUZoQ0Y7SUFHRSx5QkFBNEM7SUFDNUMsV0doQ3lCLEVBQUEsRUhpQzFCO0FBR0g7RUFFSSxtQkFBbUI7RUFDbkIsc0JBQXNCLEVBQUE7QUFIMUI7RUFNSSxtQkNLMkIsRUFBQTtBREYvQjtFQUNFLG9CQUFvQjtFQUNwQix1QkFBdUI7RUFDdkIsZUFBZSxFQUFBO0FBR2pCO0VBQ0UsYUFBYSxFQUFBO0FBR2Y7RUFDRSxtQkNONkIsRUFBQTtBRFMvQjtFQUNFLHNCQUFzQixFQUFBO0FBR3hCO0VBQ0UsWUFBWSxFQUFBO0FBR2Q7RUFDRSxjQ2xEZ0I7RURtRGhCLG1CQ3hEZ0IsRUFBQTtBRDJEbEI7RUFDRSwwQkFBd0QsRUFBQSIsImZpbGUiOiJwcm9qZWN0cy9uZy1jb21wb25lbnRzLWRvY3Mvc3JjL2FwcC9jb21wb25lbnRzL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIkYW5pbWF0aW9uczogKFxuICBzbGlkZUluTGVmdDogc2xpZGVJbkxlZnQgJHRyYW5zaXRpb24tc2xpZGUtaW4tZHVyYXRpb24sXG4gIHNsaWRlSW5SaWdodDogc2xpZGVJblJpZ2h0ICR0cmFuc2l0aW9uLXNsaWRlLWluLWR1cmF0aW9uLFxuICBzbGlkZUluVXA6IHNsaWRlSW5VcCAkdHJhbnNpdGlvbi1zbGlkZS1pbi1kdXJhdGlvbixcbiAgc2xpZGVJbkRvd246IHNsaWRlSW5Eb3duICR0cmFuc2l0aW9uLXNsaWRlLWluLWR1cmF0aW9uLFxuICBmYWRlSW46IGZhZGVJbiAkdHJhbnNpdGlvbi1mYWRlLWR1cmF0aW9uLFxuICBmYWRlSW5VcDogZmFkZUluVXAgJHRyYW5zaXRpb24tZmFkZS1kdXJhdGlvbixcbik7XG5cbkBtaXhpbiBhbmltYXRpb25zKCkge1xuICBAaWYgJGVuYWJsZS10cmFuc2l0aW9ucyB7XG4gICAgQGtleWZyYW1lcyBmYWRlSW4ge1xuICAgICAgMCUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgfVxuICAgICAgMTAwJSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG4gICAgfVxuICAgIEBrZXlmcmFtZXMgZmFkZUluVXAge1xuICAgICAgMCUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsMzBweCwwKTtcbiAgICAgIH1cbiAgICAgIDEwMCUge1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsMCwwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQGtleWZyYW1lcyBzbGlkZUluUmlnaHQge1xuICAgICAgMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsMCwwKTtcbiAgICAgIH1cbiAgICAgIDEwMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsMCwwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQGtleWZyYW1lcyBzbGlkZUluTGVmdCB7XG4gICAgICAwJSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwMCUsMCwwKTtcbiAgICAgIH1cbiAgICAgIDEwMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsMCwwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQGtleWZyYW1lcyBzbGlkZUluVXAge1xuICAgICAgMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsMTAwJSwwKTtcbiAgICAgIH1cbiAgICAgIDEwMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsMCwwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQGtleWZyYW1lcyBzbGlkZUluRG93biB7XG4gICAgICAwJSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwtMTAwJSwwKTtcbiAgICAgIH1cbiAgICAgIDEwMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsMCwwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQWRkIG9uZSBvciBtb3JlIHRyYW5zaXRpb25zXG4gKlxuICogQGV4YW1wbGVcbiAqIEBpbmNsdWRlIGFkZC10cmFuc2l0aW9uKCdzbGlkZUluVXAnKTtcbiAqIEBpbmNsdWRlIGFkZC10cmFuc2l0aW9uKCgnc2xpZGVJblVwJywnZmFkZUluJykpXG4gKi9cbkBtaXhpbiBhZGQtdHJhbnNpdGlvbigkbGlzdCkge1xuICAkY29tYmluZWQ6ICcnO1xuICBAaWYgdHlwZS1vZigkbGlzdCkgPT0gJ3N0cmluZycge1xuICAgIGFuaW1hdGlvbjogbWFwX2dldCgkYW5pbWF0aW9ucywgJGxpc3QpO1xuICB9IEBlbHNlIGlmIHR5cGUtb2YoJGxpc3QpID09ICdsaXN0JyB7XG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJGxpc3QpIHtcbiAgICAgICRhbmltOiBtYXBfZ2V0KCRhbmltYXRpb25zLCBudGgoJGxpc3QsICRpKSk7XG4gICAgICBAaWYgJGFuaW0gPT0gbnVsbCB7XG4gICAgICAgIEB3YXJuIG50aCgkbGlzdCwgJGkpIHVucXVvdGUoJ25vdCBmb3VuZCwgcGxlYXNlIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhbmltYXRpb25zOicpIHRvLWxpc3QoJGFuaW1hdGlvbnMsICdrZXlzJyk7XG4gICAgICB9XG5cbiAgICAgIEBpZiAkaSA9PSBsZW5ndGgoJGxpc3QpIHtcbiAgICAgICAgJGNvbWJpbmVkOiAkY29tYmluZWQgKyAkYW5pbTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJGNvbWJpbmVkOiAkY29tYmluZWQgKyAkYW5pbSArICcsJztcbiAgICAgIH1cbiAgICB9XG4gICAgYW5pbWF0aW9uOiB1bnF1b3RlKCRjb21iaW5lZCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQWRkIG9uZSBvciBtb3JlIHRyYW5zaXRpb25zXG4gKlxuICogQGV4YW1wbGVcbiAqIEBpbmNsdWRlIGFkZC10cmFuc2l0aW9uKCdzbGlkZUluVXAnKTtcbiAqIEBpbmNsdWRlIGFkZC10cmFuc2l0aW9uKCgnc2xpZGVJblVwJywnZmFkZUluJykpXG4gKi9cbmhlYWRlciB7XG4gIGhlaWdodDogNTZweDtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB6LWluZGV4OiAxMDIwO1xuICBsZWZ0OiAwOyB9XG5cbi5icmFuZCwgLnByb2ZpbGUsIC5tb2JpbGUtaGVhZGVyIHtcbiAgYmFja2dyb3VuZDogIzMzMztcbiAgY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNTZweDsgfVxuXG4uc2ViLWxvZ28ge1xuICBoZWlnaHQ6IDU2cHg7XG4gIHdpZHRoOiA1NnB4OyB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xuICBoZWFkZXIge1xuICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE1KTsgfSB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xuICBoZWFkZXIge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxNnJlbSk7XG4gICAgbGVmdDogMTZyZW07IH0gfVxuXG4ubW9iaWxlLWhlYWRlciAuY29sIHtcbiAgcGFkZGluZy10b3A6IC4yNXJlbTtcbiAgcGFkZGluZy1ib3R0b206IC4yNXJlbTsgfVxuXG4ubW9iaWxlLWhlYWRlciAuYWN0aXZlIHtcbiAgYmFja2dyb3VuZDogIzYwY2QxODsgfVxuXG4uZHJvcGRvd24tdG9nZ2xlIHtcbiAgcGFkZGluZy10b3A6IDAuMjVyZW07XG4gIHBhZGRpbmctYm90dG9tOiAwLjI1cmVtO1xuICBjdXJzb3I6IHBvaW50ZXI7IH1cblxuLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbi5kcm9wZG93bi5zaG93IHtcbiAgYmFja2dyb3VuZDogIzQxQjBFRTsgfVxuXG4uZHJvcGRvd24taXRlbS1saW5rIHtcbiAgcGFkZGluZzogMC41cmVtIDEuNXJlbTsgfVxuXG4uYnJlYWRjcnVtYi1jb250YWluZXIge1xuICBoZWlnaHQ6IDU2cHg7IH1cblxuLmRyb3Bkb3duLWhlYWRlciB7XG4gIGNvbG9yOiAjMzQzNDM0O1xuICBiYWNrZ3JvdW5kOiAjZGVkZWRlOyB9XG5cbi5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1oZWFkZXI6Zmlyc3QtY2hpbGQge1xuICBib3JkZXItcmFkaXVzOiA0cHggNHB4IDAgMDsgfVxuIiwiQGltcG9ydCBcIi4uLy4uLy4uL3ZhcmlhYmxlc1wiO1xuQGltcG9ydCAnfkBzZWJncm91cC9ib290c3RyYXAvc2Nzcy9zdHlsZXMvZnVuY3Rpb25zJztcbkBpbXBvcnQgJ35Ac2ViZ3JvdXAvYm9vdHN0cmFwL3Njc3MvdmFyaWFibGVzJztcbkBpbXBvcnQgJ35Ac2ViZ3JvdXAvYm9vdHN0cmFwL3Njc3MvbWl4aW5zL21peGlucyc7XG5oZWFkZXIge1xuICBoZWlnaHQ6IDU2cHg7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgei1pbmRleDogJHppbmRleC1zdGlja3k7XG4gIGxlZnQ6IDA7XG4gIC8vcGFkZGluZy1sZWZ0OiAwO1xufVxuLmJyYW5kLCAucHJvZmlsZSwgLm1vYmlsZS1oZWFkZXIge1xuICBiYWNrZ3JvdW5kOiAjMzMzO1xuICBjb2xvcjogI2ZmZjtcbiAgaGVpZ2h0OjU2cHg7XG59XG5cbi5zZWItbG9nbyB7XG4gIGhlaWdodDo1NnB4O1xuICB3aWR0aDogNTZweDtcbn1cbkBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtdXAoc20pIHtcbiAgaGVhZGVyIHtcbiAgICAvL3dpZHRoOmNhbGMoMTAwdncgLSAxN3B4KTtcbiAgICBib3gtc2hhZG93OiAwIDAgMTBweCAwIHJnYmEoMCwwLDAsMC4xNSk7XG4gIH1cbn1cbkBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtdXAobGcpIHtcbiAgaGVhZGVyIHtcbiAgICAvL3dpZHRoOmNhbGMoMTAwdncgLSAyNTZweCAtIDE3cHgpO1xuICAgIC8vd2lkdGg6Y2FsYygxMDB2dyAtIDI1NnB4KTtcbiAgICB3aWR0aDpjYWxjKDEwMCUgLSAjeyRuZ3NlYi1kb2NzLW1lbnUtd2lkdGh9KTtcbiAgICBsZWZ0OiAkbmdzZWItZG9jcy1tZW51LXdpZHRoO1xuICB9XG59XG5cbi5tb2JpbGUtaGVhZGVyIHtcbiAgLmNvbCB7XG4gICAgcGFkZGluZy10b3A6IC4yNXJlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogLjI1cmVtO1xuICB9XG4gIC5hY3RpdmUge1xuICAgIGJhY2tncm91bmQ6ICRncmVlbjtcbiAgfVxufVxuLmRyb3Bkb3duLXRvZ2dsZSB7XG4gIHBhZGRpbmctdG9wOiAwLjI1cmVtO1xuICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbTtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5kcm9wZG93bi5zaG93IHtcbiAgYmFja2dyb3VuZDogJGJsdWU7XG59XG5cbi5kcm9wZG93bi1pdGVtLWxpbmsge1xuICBwYWRkaW5nOiAwLjVyZW0gMS41cmVtO1xufVxuXG4uYnJlYWRjcnVtYi1jb250YWluZXIge1xuICBoZWlnaHQ6IDU2cHg7XG59XG5cbi5kcm9wZG93bi1oZWFkZXIge1xuICBjb2xvcjokZGFyaztcbiAgYmFja2dyb3VuZDogJGdyYXktMzAwO1xufVxuXG4uZHJvcGRvd24tbWVudSAuZHJvcGRvd24taGVhZGVyOmZpcnN0LWNoaWxkIHtcbiAgYm9yZGVyLXJhZGl1czogJGJ0bi1ib3JkZXItcmFkaXVzICRidG4tYm9yZGVyLXJhZGl1cyAwIDA7XG59XG4iLCIvLyBWYXJpYWJsZXNcbi8vXG4vLyBWYXJpYWJsZXMgc2hvdWxkIGZvbGxvdyB0aGUgYCRjb21wb25lbnQtc3RhdGUtcHJvcGVydHktc2l6ZWAgZm9ybXVsYSBmb3Jcbi8vIGNvbnNpc3RlbnQgbmFtaW5nLiBFeDogJG5hdi1saW5rLWRpc2FibGVkLWNvbG9yIGFuZCAkbW9kYWwtY29udGVudC1ib3gtc2hhZG93LXhzLlxuXG5cbi8vXG4vLyBDb2xvciBzeXN0ZW1cbi8vXG5cbiR3aGl0ZTogICAgI2ZmZiAhZGVmYXVsdDtcbiRncmF5LTEwMDogI2Y4ZjhmOCAhZGVmYXVsdDtcbiRncmF5LTIwMDogI2U5ZTllOSAhZGVmYXVsdDtcbiRncmF5LTMwMDogI2RlZGVkZSAhZGVmYXVsdDtcbiRncmF5LTQwMDogI2NlY2VjZSAhZGVmYXVsdDtcbiRncmF5LTUwMDogI2FkYWRhZCAhZGVmYXVsdDtcbiRncmF5LTYwMDogIzg2ODY4NiAhZGVmYXVsdDtcbiRncmF5LTcwMDogIzQ5NDk0OSAhZGVmYXVsdDtcbiRncmF5LTgwMDogIzM0MzQzNCAhZGVmYXVsdDtcbiRncmF5LTkwMDogIzIxMjEyMSAhZGVmYXVsdDtcbiRibGFjazogICAgIzAwMCAhZGVmYXVsdDtcblxuXG4kZ3JheXM6ICgpICFkZWZhdWx0O1xuLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNjc3MvZG9sbGFyLXZhcmlhYmxlLWRlZmF1bHRcbiRncmF5czogbWFwLW1lcmdlKFxuICAgIChcbiAgICAgIFwiMTAwXCI6ICRncmF5LTEwMCxcbiAgICAgIFwiMjAwXCI6ICRncmF5LTIwMCxcbiAgICAgIFwiMzAwXCI6ICRncmF5LTMwMCxcbiAgICAgIFwiNDAwXCI6ICRncmF5LTQwMCxcbiAgICAgIFwiNTAwXCI6ICRncmF5LTUwMCxcbiAgICAgIFwiNjAwXCI6ICRncmF5LTYwMCxcbiAgICAgIFwiNzAwXCI6ICRncmF5LTcwMCxcbiAgICAgIFwiODAwXCI6ICRncmF5LTgwMCxcbiAgICAgIFwiOTAwXCI6ICRncmF5LTkwMFxuICAgICksXG4gICAgJGdyYXlzXG4pO1xuXG5cbiRyZWQ6ICAgICAgICAgICAgICAgICAgICNGMDM1Mjk7XG4kcmVkLWRhcms6ICAgICAgICAgICAgICAjRDgxQTFBOyAvLyBTRUIgc3BlY2lmaWNcbiRyZWQtZGFya2VyOiAgICAgICAgICAgICNCQjAwMEM7IC8vIFNFQiBzcGVjaWZpY1xuJHllbGxvdy1kYXJrZXI6ICAgICAgICAgI0Y4QTAwMDsgLy8gU0VCIHNwZWNpZmljXG4keWVsbG93LWRhcms6ICAgICAgICAgICAjRkZCNDAwOyAvLyBTRUIgc3BlY2lmaWNcbiR5ZWxsb3c6ICAgICAgICAgICAgICAgICNGRkM1MDA7XG4kZ3JlZW46ICAgICAgICAgICAgICAgICAjNjBjZDE4O1xuJGdyZWVuLWRhcms6ICAgICAgICAgICAgIzQ1QjQwMDsgLy8gU0VCIHNwZWNpZmljXG4kZ3JlZW4tZGFya2VyOiAgICAgICAgICAjMzc5RDAwOyAvLyBTRUIgc3BlY2lmaWNcbiRibHVlOiAgICAgICAgICAgICAgICAgICM0MUIwRUU7XG4kYmx1ZS1kYXJrOiAgICAgICAgICAgICAjMDA5MkUxOyAvLyBTRUIgc3BlY2lmaWNcbiRibHVlLWRhcmtlcjogICAgICAgICAgICMwMDdBQzc7IC8vIFNFQiBzcGVjaWZpY1xuJHB1cnBsZTogICAgICAgICAgICAgICAgIzY3M0FCNjtcbiRwdXJwbGUtZGFyazogICAgICAgICAgICM0RjJDOTk7IC8vIFNFQiBzcGVjaWZpY1xuJHB1cnBsZS1kYXJrZXI6ICAgICAgICAgIzNGMjU4NzsgLy8gU0VCIHNwZWNpZmljXG5cblxuJHByaW1hcnk6ICAgICAgICRibHVlICFkZWZhdWx0O1xuJHNlY29uZGFyeTogICAgICRncmF5LTMwMCAhZGVmYXVsdDtcbiRzdWNjZXNzOiAgICAgICAkZ3JlZW4gIWRlZmF1bHQ7XG4kaW5mbzogICAgICAgICAgJHB1cnBsZSAhZGVmYXVsdDtcbiR3YXJuaW5nOiAgICAgICAkeWVsbG93ICFkZWZhdWx0O1xuJGRhbmdlcjogICAgICAgICRyZWQgIWRlZmF1bHQ7XG4kbGlnaHQ6ICAgICAgICAgJGdyYXktMTAwICFkZWZhdWx0O1xuJGRhcms6ICAgICAgICAgICRncmF5LTgwMCAhZGVmYXVsdDtcblxuJHRoZW1lLWNvbG9yczogKCkgIWRlZmF1bHQ7XG4vLyBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2Nzcy9kb2xsYXItdmFyaWFibGUtZGVmYXVsdFxuJHRoZW1lLWNvbG9yczogbWFwLW1lcmdlKFxuICAgIChcbiAgICAgIFwicHJpbWFyeVwiOiAgICAkcHJpbWFyeSxcbiAgICAgIFwic2Vjb25kYXJ5XCI6ICAkc2Vjb25kYXJ5LFxuICAgICAgXCJzdWNjZXNzXCI6ICAgICRzdWNjZXNzLFxuICAgICAgXCJpbmZvXCI6ICAgICAgICRpbmZvLFxuICAgICAgXCJ3YXJuaW5nXCI6ICAgICR3YXJuaW5nLFxuICAgICAgXCJkYW5nZXJcIjogICAgICRkYW5nZXIsXG4gICAgICBcImxpZ2h0XCI6ICAgICAgJGxpZ2h0LFxuICAgICAgXCJkYXJrXCI6ICAgICAgICRkYXJrXG4gICAgKSxcbiAgICAkdGhlbWUtY29sb3JzXG4pO1xuXG4vLyBPcHRpb25zXG4vL1xuLy8gUXVpY2tseSBtb2RpZnkgZ2xvYmFsIHN0eWxpbmcgYnkgZW5hYmxpbmcgb3IgZGlzYWJsaW5nIG9wdGlvbmFsIGZlYXR1cmVzLlxuXG4kZW5hYmxlLWNhcmV0OiAgICAgICAgICAgICAgdHJ1ZSAhZGVmYXVsdDtcbiRlbmFibGUtcm91bmRlZDogICAgICAgICAgICB0cnVlICFkZWZhdWx0O1xuJGVuYWJsZS1zaGFkb3dzOiAgICAgICAgICAgIGZhbHNlICFkZWZhdWx0O1xuJGVuYWJsZS1ncmFkaWVudHM6ICAgICAgICAgIGZhbHNlICFkZWZhdWx0O1xuJGVuYWJsZS10cmFuc2l0aW9uczogICAgICAgIHRydWUgIWRlZmF1bHQ7XG4kZW5hYmxlLWdyaWQtY2xhc3NlczogICAgICAgdHJ1ZSAhZGVmYXVsdDtcbiRlbmFibGUtcG9pbnRlci1jdXJzb3ItZm9yLWJ1dHRvbnM6ICAgICAgICAgICB0cnVlICFkZWZhdWx0O1xuJGVuYWJsZS1wcmludC1zdHlsZXM6ICAgICAgIHRydWUgIWRlZmF1bHQ7XG4kZW5hYmxlLXJlc3BvbnNpdmUtZm9udC1zaXplczogICAgICAgICAgICAgICAgZmFsc2UgIWRlZmF1bHQ7XG4kZW5hYmxlLXZhbGlkYXRpb24taWNvbnM6ICAgZmFsc2UgIWRlZmF1bHQ7XG4kZW5hYmxlLXJlc3BvbnNpdmUtZ3V0dGVyczogICAgIGZhbHNlICFkZWZhdWx0OyAvLyBTRUIgU3BlY2lmaWNcbiRlbmFibGUtYnV0dG9uLXZhcmlhdGlvbnM6ICAgICAgZmFsc2UgIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuJGVuYWJsZS1uZy1ib290c3RyYXA6ICAgICAgICAgICBmYWxzZSAhZGVmYXVsdDsgLy8gU0VCIFNwZWNpZmljXG4kZW5hYmxlLWFuZ3VsYXItZ2VuZXJpYy10YWJsZTogIGZhbHNlICFkZWZhdWx0OyAvLyBTRUIgU3BlY2lmaWNcbiRlbmFibGUtbmd4LXRvYXN0cjogICAgICAgICAgICAgZmFsc2UgIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuJGVuYWJsZS1kZXByZWNhdGlvbi1tZXNzYWdlczogICAgICAgICAgICAgICAgIHRydWUgIWRlZmF1bHQ7XG5cbi8vIFNwYWNpbmdcbi8vXG4vLyBDb250cm9sIHRoZSBkZWZhdWx0IHN0eWxpbmcgb2YgbW9zdCBCb290c3RyYXAgZWxlbWVudHMgYnkgbW9kaWZ5aW5nIHRoZXNlXG4vLyB2YXJpYWJsZXMuIE1vc3RseSBmb2N1c2VkIG9uIHNwYWNpbmcuXG4vLyBZb3UgY2FuIGFkZCBtb3JlIGVudHJpZXMgdG8gdGhlICRzcGFjZXJzIG1hcCwgc2hvdWxkIHlvdSBuZWVkIG1vcmUgdmFyaWF0aW9uLlxuXG4kc3BhY2VyOiAxcmVtICFkZWZhdWx0O1xuJHNwYWNlcnM6ICgpICFkZWZhdWx0O1xuLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNjc3MvZG9sbGFyLXZhcmlhYmxlLWRlZmF1bHRcbiRzcGFjZXJzOiBtYXAtbWVyZ2UoXG4gICAgKFxuICAgICAgMDogMCxcbiAgICAgIDE6ICgkc3BhY2VyICogLjI1KSxcbiAgICAgIDI6ICgkc3BhY2VyICogLjUpLFxuICAgICAgMzogJHNwYWNlcixcbiAgICAgIDQ6ICgkc3BhY2VyICogMiksXG4gICAgICA1OiAoJHNwYWNlciAqIDMpXG4gICAgKSxcbiAgICAkc3BhY2Vyc1xuKTtcblxuLy8gVGhpcyB2YXJpYWJsZSBhZmZlY3RzIHRoZSBgLmgtKmAgYW5kIGAudy0qYCBjbGFzc2VzLlxuJHNpemVzOiAoKSAhZGVmYXVsdDtcbi8vIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBzY3NzL2RvbGxhci12YXJpYWJsZS1kZWZhdWx0XG4kc2l6ZXM6IG1hcC1tZXJnZShcbiAgICAoXG4gICAgICAyNTogMjUlLFxuICAgICAgNTA6IDUwJSxcbiAgICAgIDc1OiA3NSUsXG4gICAgICAxMDA6IDEwMCUsXG4gICAgICBhdXRvOiBhdXRvXG4gICAgKSxcbiAgICAkc2l6ZXNcbik7XG5cbi8vIEJvZHlcbi8vXG4vLyBTZXR0aW5ncyBmb3IgdGhlIGA8Ym9keT5gIGVsZW1lbnQuXG5cbiRib2R5LWNvbG9yOiAgICAgICAgICAgICAgICAjNDQ0ICFkZWZhdWx0O1xuXG5cbi8vIFBhcmFncmFwaHNcbi8vXG4vLyBTdHlsZSBwIGVsZW1lbnQuXG5cbi8vIEdyaWQgYnJlYWtwb2ludHNcblxuLy8gR3JpZCBjb250YWluZXJzXG5cbi8vIEdyaWQgY29sdW1uc1xuLy9cbi8vIFNldCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgYW5kIHNwZWNpZnkgdGhlIHdpZHRoIG9mIHRoZSBndXR0ZXJzLlxuXG4kZ3JpZC1ndXR0ZXItd2lkdGg6IG1hcC1nZXQoJHNwYWNlcnMsIDMpKjIgIWRlZmF1bHQ7XG5cbi8vIFNFQiBzcGVjaWZpYyBvdmVycmlkZSB3aGVuIHJlc3BvbnNpdmUgZ3V0dGVycyBhcmUgZW5hYmxlZFxuQGlmICgkZW5hYmxlLXJlc3BvbnNpdmUtZ3V0dGVycykge1xuICAkZ3JpZC1ndXR0ZXItd2lkdGg6IG1hcC1nZXQoJHNwYWNlcnMsIDIpO1xufVxuXG4vLyBTRUIgc3BlY2lmaWNcbiRyZXNwb25zaXZlLWd1dHRlcnM6IChcbiAgc206bWFwLWdldCgkc3BhY2VycywgMikqMixcbiAgbGc6bWFwLWdldCgkc3BhY2VycywgMikqMixcbiAgeGw6bWFwLWdldCgkc3BhY2VycywgMykqMlxuKSAhZGVmYXVsdDtcblxuLy8gQ29tcG9uZW50c1xuLy9cbi8vIERlZmluZSBjb21tb24gcGFkZGluZyBhbmQgYm9yZGVyIHJhZGl1cyBzaXplcyBhbmQgbW9yZS5cblxuJGJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgICAgMCAhZGVmYXVsdDtcbiRib3JkZXItcmFkaXVzLWxnOiAgICAgICAgICAgIDAgIWRlZmF1bHQ7XG4kYm9yZGVyLXJhZGl1cy1zbTogICAgICAgICAgICAwICFkZWZhdWx0O1xuXG4kdHJhbnNpdGlvbi1zbGlkZS1pbi1kdXJhdGlvbjouNHMgZWFzZS1pbi1vdXQgIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuJHRyYW5zaXRpb24tZmFkZS1kdXJhdGlvbjogICAgLjE1cyBsaW5lYXIgIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuJHRyYW5zaXRpb24tZmFkZTogICAgICAgICAgICAgb3BhY2l0eSAkdHJhbnNpdGlvbi1mYWRlLWR1cmF0aW9uICFkZWZhdWx0O1xuXG5cblxuLy8gRm9udHNcbi8vXG4vLyBGb250LCBsaW5lLWhlaWdodCwgYW5kIGNvbG9yIGZvciBib2R5IHRleHQsIGhlYWRpbmdzLCBhbmQgbW9yZS5cblxuLy8gc3R5bGVsaW50LWRpc2FibGUgdmFsdWUta2V5d29yZC1jYXNlXG4kc2ViLWZvbnQtcGF0aDogICAgICAgICAgICAgICBcIn5Ac2ViZ3JvdXAvZm9udHMvZm9udHNcIiAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG4kZm9udC1mYW1pbHktc2Fucy1zZXJpZjogICAgICBcIlNFQlNhbnNTZXJpZlwiLCBcIlRyZWJ1Y2hldCBNU1wiLCBcIlRyZWJ1Y2hldFwiLCBcIkhlbHZldGljYSBOZXVlXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYgIWRlZmF1bHQ7XG4kZm9udC1mYW1pbHktbW9ub3NwYWNlOiAgICAgICBTRk1vbm8tUmVndWxhciwgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFwiTGliZXJhdGlvbiBNb25vXCIsIFwiQ291cmllciBOZXdcIiwgbW9ub3NwYWNlICFkZWZhdWx0O1xuLy8gc3R5bGVsaW50LWVuYWJsZSB2YWx1ZS1rZXl3b3JkLWNhc2VcblxuJGZvbnQtc2l6ZS1iYXNlOiAgICAgICAgICAgICAgMXJlbSAhZGVmYXVsdDsgLy8gQXNzdW1lcyB0aGUgYnJvd3NlciBkZWZhdWx0LCB0eXBpY2FsbHkgYDE2cHhgXG4kZm9udC1zaXplLWxnOiAgICAgICAgICAgICAgICAoJGZvbnQtc2l6ZS1iYXNlICogMS4yNSkgIWRlZmF1bHQ7XG4kZm9udC1zaXplLXNtOiAgICAgICAgICAgICAgICAoJGZvbnQtc2l6ZS1iYXNlICogLjg3NSkgIWRlZmF1bHQ7XG4kZm9udC1zaXplLXhzOiAgICgkZm9udC1zaXplLWJhc2UgKiAuNjg3NSkgIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuXG5cbiRmb250LXdlaWdodC1tZWRpdW06ICAgICAgICAgIDUwMCAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG5cblxuJGgxLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICogMyAhZGVmYXVsdDtcbiRoMy1mb250LXNpemU6ICAgICAgICAgICAgICAgICRmb250LXNpemUtYmFzZSAqIDEuNSAhZGVmYXVsdDtcbiRoNC1mb250LXNpemU6ICAgICAgICAgICAgICAgICRmb250LXNpemUtYmFzZSAqIDEuMjUgIWRlZmF1bHQ7XG4kaDUtZm9udC1zaXplOiAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgIWRlZmF1bHQ7XG4kaDYtZm9udC1zaXplOiAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgKiAwLjg3NSAhZGVmYXVsdDtcblxuJGgxLW1kLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICogMi41ICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcbiRoMi1tZC1mb250LXNpemU6ICAgICAgICAgICAgICAgICRmb250LXNpemUtYmFzZSAqIDEuNSAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG4kaDMtbWQtZm9udC1zaXplOiAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgKiAxLjI1ICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcblxuJGgxLXNtLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICogMiAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG4kaDItc20tZm9udC1zaXplOiAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgKiAxLjUgIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuJGgzLXNtLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICogMS4yNSAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG5cbiRoZWFkaW5ncy1mb250LXdlaWdodDogICAgICAgICRmb250LXdlaWdodC1tZWRpdW0gIWRlZmF1bHQ7XG4kaGVhZGluZ3MtY29sb3I6ICAgICAgICAgICAgICAjMjIyICFkZWZhdWx0O1xuXG4kc21hbGwtZm9udC1zaXplOiAgICAgICAgICAgICAkZm9udC1zaXplLXNtICFkZWZhdWx0O1xuXG4vLyBMaW5rc1xuLy9cbi8vIFN0eWxlIGFuY2hvciBlbGVtZW50cy5cblxuJGxpbmstY29sb3I6ICAgICAgICAgICAgICAgICRibHVlLWRhcmtlciAhZGVmYXVsdDtcbiRsaW5rLWhvdmVyLWNvbG9yOiAgICAgICAgICAkYmx1ZSAhZGVmYXVsdDtcbiRsaW5rLXdlaWdodDogICAgICAgICAgICAgICAkZm9udC13ZWlnaHQtbWVkaXVtICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcblxuJGV4dGVybmFsLWxpbmstaWNvbi1jb2xvcjogICAgICAgICRsaW5rLWNvbG9yICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcbiRleHRlcm5hbC1saW5rLWhvdmVyLWljb24tY29sb3I6ICAkbGluay1ob3Zlci1jb2xvciAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG4kZXh0ZXJuYWwtbGluay1pY29uOiAgICAgICAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyBhcmlhLWhpZGRlbj0ndHJ1ZScgZGF0YS1wcmVmaXg9J2ZhbCcgZGF0YS1pY29uPSdleHRlcm5hbC1saW5rLXNxdWFyZScgY2xhc3M9J3N2Zy1pbmxpbmUtLWZhIGZhLWV4dGVybmFsLWxpbmstc3F1YXJlIGZhLXctMTQnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQ0OCA1MTInJTNFJTNDcGF0aCBmaWxsPScjeyRleHRlcm5hbC1saW5rLWljb24tY29sb3J9JyBkPSdNNDAwIDMySDQ4QzIxLjQ5IDMyIDAgNTMuNDkgMCA4MHYzNTJjMCAyNi41MSAyMS40OSA0OCA0OCA0OGgzNTJjMjYuNTEgMCA0OC0yMS40OSA0OC00OFY4MGMwLTI2LjUxLTIxLjQ5LTQ4LTQ4LTQ4em0xNiA0MDBjMCA4LjgyMi03LjE3OCAxNi0xNiAxNkg0OGMtOC44MjIgMC0xNi03LjE3OC0xNi0xNlY4MGMwLTguODIyIDcuMTc4LTE2IDE2LTE2aDM1MmM4LjgyMiAwIDE2IDcuMTc4IDE2IDE2djM1MnpNOTkuNTE1IDM3NC44MjhjLTQuNjg2LTQuNjg2LTQuNjg2LTEyLjI4NCAwLTE2Ljk3MWwxOTUuMTUtMTk1LjE1LS43MDctLjcwNy04OS45NTguMzQyYy02LjYyNyAwLTEyLTUuMzczLTEyLTEydi05Ljk5OWMwLTYuNjI4IDUuMzcyLTEyIDEyLTEyTDM0MCAxMjhjNi42MjcgMCAxMiA1LjM3MiAxMiAxMmwtLjM0MyAxMzZjMCA2LjYyNy01LjM3MyAxMi0xMiAxMmgtOS45OTljLTYuNjI3IDAtMTItNS4zNzMtMTItMTJsLjM0Mi04OS45NTgtLjcwNy0uNzA3LTE5NS4xNSAxOTUuMTVjLTQuNjg2IDQuNjg2LTEyLjI4NCA0LjY4Ni0xNi45NzEgMGwtNS42NTctNS42NTd6Jy8lM0UlM0Mvc3ZnJTNFXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuJGV4dGVybmFsLWxpbmstaG92ZXItaWNvbjogICAgICAgIHN0ci1yZXBsYWNlKHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgYXJpYS1oaWRkZW49J3RydWUnIGRhdGEtcHJlZml4PSdmYWwnIGRhdGEtaWNvbj0nZXh0ZXJuYWwtbGluay1zcXVhcmUnIGNsYXNzPSdzdmctaW5saW5lLS1mYSBmYS1leHRlcm5hbC1saW5rLXNxdWFyZSBmYS13LTE0JyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0NDggNTEyJyUzRSUzQ3BhdGggZmlsbD0nI3skZXh0ZXJuYWwtbGluay1ob3Zlci1pY29uLWNvbG9yfScgZD0nTTQwMCAzMkg0OEMyMS40OSAzMiAwIDUzLjQ5IDAgODB2MzUyYzAgMjYuNTEgMjEuNDkgNDggNDggNDhoMzUyYzI2LjUxIDAgNDgtMjEuNDkgNDgtNDhWODBjMC0yNi41MS0yMS40OS00OC00OC00OHptMTYgNDAwYzAgOC44MjItNy4xNzggMTYtMTYgMTZINDhjLTguODIyIDAtMTYtNy4xNzgtMTYtMTZWODBjMC04LjgyMiA3LjE3OC0xNiAxNi0xNmgzNTJjOC44MjIgMCAxNiA3LjE3OCAxNiAxNnYzNTJ6TTk5LjUxNSAzNzQuODI4Yy00LjY4Ni00LjY4Ni00LjY4Ni0xMi4yODQgMC0xNi45NzFsMTk1LjE1LTE5NS4xNS0uNzA3LS43MDctODkuOTU4LjM0MmMtNi42MjcgMC0xMi01LjM3My0xMi0xMnYtOS45OTljMC02LjYyOCA1LjM3Mi0xMiAxMi0xMkwzNDAgMTI4YzYuNjI3IDAgMTIgNS4zNzIgMTIgMTJsLS4zNDMgMTM2YzAgNi42MjctNS4zNzMgMTItMTIgMTJoLTkuOTk5Yy02LjYyNyAwLTEyLTUuMzczLTEyLTEybC4zNDItODkuOTU4LS43MDctLjcwNy0xOTUuMTUgMTk1LjE1Yy00LjY4NiA0LjY4Ni0xMi4yODQgNC42ODYtMTYuOTcxIDBsLTUuNjU3LTUuNjU3eicvJTNFJTNDL3N2ZyUzRVwiKSwgXCIjXCIsIFwiJTIzXCIpICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcblxuLy8gR3JpZCBicmVha3BvaW50c1xuLy9cbi8vIERlZmluZSB0aGUgbWluaW11bSBkaW1lbnNpb25zIGF0IHdoaWNoIHlvdXIgbGF5b3V0IHdpbGwgY2hhbmdlLFxuLy8gYWRhcHRpbmcgdG8gZGlmZmVyZW50IHNjcmVlbiBzaXplcywgZm9yIHVzZSBpbiBtZWRpYSBxdWVyaWVzLlxuXG4kZ3JpZC1icmVha3BvaW50czogKFxuICAgICAgICB4czogMCxcbiAgICAgICAgc206IDU3NnB4LFxuICAgICAgICBtZDogNzY4cHgsXG4gICAgICAgIGxnOiA5OTJweCxcbiAgICAgICAgeGw6IDEyMDBweFxuKSAhZGVmYXVsdDtcblxuLy8gVGFibGVzXG4vL1xuLy8gQ3VzdG9taXplcyB0aGUgYC50YWJsZWAgY29tcG9uZW50IHdpdGggYmFzaWMgdmFsdWVzLCBlYWNoIHVzZWQgYWNyb3NzIGFsbCB0YWJsZSB2YXJpYXRpb25zLlxuXG4kdGFibGUtY2VsbC1wYWRkaW5nOiAgICAgICAgICAuNjI1cmVtIC43NXJlbSAhZGVmYXVsdDtcbiR0YWJsZS1jZWxsLXBhZGRpbmctc206ICAgICAgIC4yNzVyZW0gLjNyZW0gIWRlZmF1bHQ7XG5cbiR0YWJsZS1hY2NlbnQtYmc6ICAgICAgICAgICAgICRncmF5LTEwMCAhZGVmYXVsdDtcbiR0YWJsZS1ob3Zlci1iZzogICAgICAgICAgICAgIHJnYmEoJGJsdWUsIC4wNzUpICFkZWZhdWx0O1xuXG4kdGFibGUtaGVhZC1jb2xvcjogICAgICAgICAgICAkaGVhZGluZ3MtY29sb3IgIWRlZmF1bHQ7XG5cbiR0YWJsZS1leHBhbmQtYmc6ICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQgIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuXG4vLyBCdXR0b25zICsgRm9ybXNcbi8vXG4vLyBTaGFyZWQgdmFyaWFibGVzIHRoYXQgYXJlIHJlYXNzaWduZWQgdG8gYCRpbnB1dC1gIGFuZCBgJGJ0bi1gIHNwZWNpZmljIHZhcmlhYmxlcy5cblxuJGlucHV0LWJ0bi1wYWRkaW5nLXk6ICAgICAgICAgLjU2MjVyZW0gIWRlZmF1bHQ7XG4kaW5wdXQtYnRuLXBhZGRpbmcteS1zbTogICAgICAuMjgxMjVyZW0gIWRlZmF1bHQ7XG4kaW5wdXQtYnRuLXBhZGRpbmcteS1sZzogICAgICAuNzVyZW0gIWRlZmF1bHQ7XG5cblxuLy8gQnV0dG9uc1xuLy9cbi8vIEZvciBlYWNoIG9mIEJvb3RzdHJhcCdzIGJ1dHRvbnMsIGRlZmluZSB0ZXh0LCBiYWNrZ3JvdW5kLCBhbmQgYm9yZGVyIGNvbG9yLlxuXG4kYnRuLWZvbnQtd2VpZ2h0OiAgICAgICAgICAgICAkZm9udC13ZWlnaHQtbWVkaXVtICFkZWZhdWx0O1xuJGJ0bi1kaXNhYmxlZC1vcGFjaXR5OiAgICAgICAgMSAhZGVmYXVsdDtcbiRidG4tZGlzYWJsZWQtY29sb3I6ICAgICAgICAgICRncmF5LTUwMCAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG5cbiRidG4tYm9yZGVyLXJhZGl1czogICAgICAgICAgIDRweCAhZGVmYXVsdDtcbiRidG4tYm9yZGVyLXJhZGl1cy1sZzogICAgICAgIDRweCAhZGVmYXVsdDtcbiRidG4tYm9yZGVyLXJhZGl1cy1zbTogICAgICAgIDRweCAhZGVmYXVsdDtcblxuLy8gRm9ybXNcblxuJGxhYmVsLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICAgICAgICRoZWFkaW5ncy1jb2xvciAhZGVmYXVsdDsgLy8gU0VCIFNwZWNpZmljXG5cbiRpbnB1dC1iZzogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG5cbiRpbnB1dC1ib3JkZXItcmFkaXVzOiAgICAgICAgICAgICAgICAgICA0cHggIWRlZmF1bHQ7XG4kaW5wdXQtYm9yZGVyLXJhZGl1cy1sZzogICAgICAgICAgICAgICAgNHB4ICFkZWZhdWx0O1xuJGlucHV0LWJvcmRlci1yYWRpdXMtc206ICAgICAgICAgICAgICAgIDRweCAhZGVmYXVsdDtcblxuJGlucHV0LWZvY3VzLWJvcmRlci1jb2xvcjogICAgICAgICAgICAgICRibHVlICFkZWZhdWx0O1xuXG4kaW5wdXQtZ3JvdXAtYWRkb24tYmc6ICAgICAgICAgICAgICAgICAgJGlucHV0LWJnICFkZWZhdWx0O1xuXG4kY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWJnLXNpemU6ICAgICAgNjUlIDY1JSAhZGVmYXVsdDtcbiRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1iZzogICAgICAgICAgICRibHVlICFkZWZhdWx0O1xuXG5cbiRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItZGlzYWJsZWQtYmc6ICAgICAgICAgICRncmF5LTEwMCAhZGVmYXVsdDtcbiRjdXN0b20tY29udHJvbC1sYWJlbC1kaXNhYmxlZC1jb2xvcjogICAgICAgICAgICRncmF5LTQwMCAhZGVmYXVsdDtcblxuJGN1c3RvbS1yYWRpby1pbmRpY2F0b3ItaWNvbi1jaGVja2VkOiAgICAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PSctNCAtNCA4IDgnJTNFJTNDY2lyY2xlIHI9JzMuNScgZmlsbD0nI3skY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWNoZWNrZWQtYmd9Jy8lM0UlM0Mvc3ZnJTNFXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7XG4kY3VzdG9tLXNsaWRlLXRvZ2dsZS1pbmRpY2F0b3ItaWNvbi1jaGVja2VkOiAgICAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PSctNCAtNCA4IDgnJTNFJTNDY2lyY2xlIHI9JzMuNScgZmlsbD0nI3skY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWNoZWNrZWQtYmd9Jy8lM0UlM0Mvc3ZnJTNFXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuXG4kY3VzdG9tLXNlbGVjdC1pbmRpY2F0b3ItY29sb3I6ICAgICAkYmx1ZTtcbiRjdXN0b20tc2VsZWN0LWJnLXNpemU6ICAgICAgICAgICAgIDE2cHggMTZweCAhZGVmYXVsdDsgLy8gSW4gcGl4ZWxzIGJlY2F1c2UgaW1hZ2UgZGltZW5zaW9uc1xuJGN1c3RvbS1zZWxlY3QtaW5kaWNhdG9yOiAgICAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9VVRGLTgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQ0OCA1MTInJTNFJTNDcGF0aCBmaWxsPScjeyRjdXN0b20tc2VsZWN0LWluZGljYXRvci1jb2xvcn0nIGQ9J000NDMuNSAxNjIuNmwtNy4xLTcuMWMtNC43LTQuNy0xMi4zLTQuNy0xNyAwTDIyNCAzNTEgMjguNSAxNTUuNWMtNC43LTQuNy0xMi4zLTQuNy0xNyAwbC03LjEgNy4xYy00LjcgNC43LTQuNyAxMi4zIDAgMTdsMjExIDIxMS4xYzQuNyA0LjcgMTIuMyA0LjcgMTcgMGwyMTEtMjExLjFjNC44LTQuNyA0LjgtMTIuMy4xLTE3eicvJTNFJTNDL3N2ZyUzRVwiKSwgXCIjXCIsIFwiJTIzXCIpICFkZWZhdWx0O1xuJGN1c3RvbS1zZWxlY3QtYm9yZGVyLXJhZGl1czogICAgICAgNHB4ICFkZWZhdWx0O1xuXG5cbiRjdXN0b20tZmlsZS10ZXh0OiAoXG4gIGVuOiBcIkJyb3dzZVwiXG4pICFkZWZhdWx0O1xuXG5cbi8vIEZvcm0gdmFsaWRhdGlvblxuJGZvcm0tZmVlZGJhY2stZm9udC1zaXplOiAgICAgICAgICAgJGZvbnQtc2l6ZS1zbSAhZGVmYXVsdDtcbiRmb3JtLWZlZWRiYWNrLXZhbGlkLWNvbG9yOiAgICAgICAgIHRoZW1lLWNvbG9yKFwic3VjY2Vzc1wiKSAhZGVmYXVsdDtcbiRmb3JtLWZlZWRiYWNrLWludmFsaWQtY29sb3I6ICAgICAgIHRoZW1lLWNvbG9yKFwiZGFuZ2VyXCIpICFkZWZhdWx0O1xuJGZvcm0tZmVlZGJhY2staWNvbi12YWxpZC1jb2xvcjogICAgJGZvcm0tZmVlZGJhY2stdmFsaWQtY29sb3IgIWRlZmF1bHQ7XG4kZm9ybS1mZWVkYmFjay1pY29uLXZhbGlkOiAgICAgICAgICBzdHItcmVwbGFjZSh1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQ0OCA1MTInJTNFJTNDcGF0aCBkPSdNNDEzLjUwNSA5MS45NTFMMTMzLjQ5IDM3MS45NjZsLTk4Ljk5NS05OC45OTVjLTQuNjg2LTQuNjg2LTEyLjI4NC00LjY4Ni0xNi45NzEgMEw2LjIxMSAyODQuMjg0Yy00LjY4NiA0LjY4Ni00LjY4NiAxMi4yODQgMCAxNi45NzFsMTE4Ljc5NCAxMTguNzk0YzQuNjg2IDQuNjg2IDEyLjI4NCA0LjY4NiAxNi45NzEgMGwyOTkuODEzLTI5OS44MTNjNC42ODYtNC42ODYgNC42ODYtMTIuMjg0IDAtMTYuOTcxbC0xMS4zMTQtMTEuMzE0Yy00LjY4Ni00LjY4Ni0xMi4yODQtNC42ODYtMTYuOTcgMHonIGZpbGw9JyN7JGZvcm0tZmVlZGJhY2staWNvbi12YWxpZC1jb2xvcn0nLyUzRSUzQy9zdmclM0VcIiksIFwiI1wiLCBcIiUyM1wiKSAhZGVmYXVsdDtcbiRmb3JtLWZlZWRiYWNrLWljb24taW52YWxpZC1jb2xvcjogICRmb3JtLWZlZWRiYWNrLWludmFsaWQtY29sb3IgIWRlZmF1bHQ7XG4kZm9ybS1mZWVkYmFjay1pY29uLWludmFsaWQ6ICAgICAgICBzdHItcmVwbGFjZSh1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDU3NiA1MTInJTNFJTNDcGF0aCBkPSdNNTY5LjUxNyA0NDAuMDEzQzU4Ny45NzUgNDcyLjAwNyA1NjQuODA2IDUxMiA1MjcuOTQgNTEySDQ4LjA1NGMtMzYuOTM3IDAtNTkuOTk5LTQwLjA1NC00MS41NzctNzEuOTg3TDI0Ni40MjMgMjMuOTg1YzE4LjQ2Ny0zMi4wMDkgNjQuNzItMzEuOTUyIDgzLjE1NCAwbDIzOS45NCA0MTYuMDI4em0tMjcuNjU4IDE1Ljk5MWwtMjQwLTQxNmMtNi4xNi0xMC42NzgtMjEuNTgzLTEwLjYzNC0yNy43MTggMGwtMjQwIDQxNkMyNy45ODMgNDY2LjY3OCAzNS43MzEgNDgwIDQ4IDQ4MGg0ODBjMTIuMzIzIDAgMTkuOTktMTMuMzY5IDEzLjg1OS0yMy45OTZ6TTI4OCAzNzJjLTE1LjQ2NCAwLTI4IDEyLjUzNi0yOCAyOHMxMi41MzYgMjggMjggMjggMjgtMTIuNTM2IDI4LTI4LTEyLjUzNi0yOC0yOC0yOHptLTExLjQ5LTIxMmgyMi45NzljNi44MjMgMCAxMi4yNzQgNS42ODIgMTEuOTkgMTIuNWwtNyAxNjhjLS4yNjggNi40MjgtNS41NTYgMTEuNS0xMS45OSAxMS41aC04Ljk3OWMtNi40MzMgMC0xMS43MjItNS4wNzMtMTEuOTktMTEuNWwtNy0xNjhjLS4yODMtNi44MTggNS4xNjctMTIuNSAxMS45OS0xMi41ek0yODggMzcyYy0xNS40NjQgMC0yOCAxMi41MzYtMjggMjhzMTIuNTM2IDI4IDI4IDI4IDI4LTEyLjUzNiAyOC0yOC0xMi41MzYtMjgtMjgtMjh6JyBmaWxsPScjeyRmb3JtLWZlZWRiYWNrLWljb24taW52YWxpZC1jb2xvcn0nLyUzRSUzQy9zdmclM0VcIiksIFwiI1wiLCBcIiUyM1wiKSAhZGVmYXVsdDtcbiRmb3JtLWZlZWRiYWNrLWxpbmUtdGhpY2tuZXNzOiAgICAgIDJweCAhZGVmYXVsdDtcblxuLy8gRHJvcGRvd25zXG4vL1xuLy8gRHJvcGRvd24gbWVudSBjb250YWluZXIgYW5kIGNvbnRlbnRzLlxuXG5cbiRkcm9wZG93bi1ib3JkZXItY29sb3I6ICAgICAgICAgICAgICRibHVlICFkZWZhdWx0O1xuJGRyb3Bkb3duLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgNHB4ICFkZWZhdWx0O1xuXG4kZHJvcGRvd24tbGluay1ob3Zlci1jb2xvcjogICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kZHJvcGRvd24tbGluay1ob3Zlci1iZzogICAgICAgICAgICAkYmx1ZSAhZGVmYXVsdDtcblxuJGRyb3Bkb3duLWxpbmstYWN0aXZlLWJnOiAgICAgICAgICAgJGJsdWUtZGFyayAhZGVmYXVsdDtcblxuXG4kZHJvcGRvd24taXRlbS1wYWRkaW5nLXk6ICAgICAgICAgICAuNjI1cmVtICFkZWZhdWx0O1xuJGRyb3Bkb3duLWNoZXZyb24tY29sb3I6ICAgICAgICAgICAgJGJsdWUgIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuJGRyb3Bkb3duLWNoZXZyb24tYWN0aXZlLWNvbG9yOiAgICAgJHdoaXRlICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcblxuXG5cbi8vIFotaW5kZXggbWFzdGVyIGxpc3Rcbi8vXG4vLyBXYXJuaW5nOiBBdm9pZCBjdXN0b21pemluZyB0aGVzZSB2YWx1ZXMuIFRoZXkncmUgdXNlZCBmb3IgYSBiaXJkJ3MgZXllIHZpZXdcbi8vIG9mIGNvbXBvbmVudHMgZGVwZW5kZW50IG9uIHRoZSB6LWF4aXMgYW5kIGFyZSBkZXNpZ25lZCB0byBhbGwgd29yayB0b2dldGhlci5cblxuJHppbmRleC1kcm9wZG93bi1iYWNrZHJvcDogICAgICAgICAgOTkwICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcbiR6aW5kZXgtZHJvcGRvd246ICAgICAgICAgICAgICAgICAgIDEwMDAgIWRlZmF1bHQ7XG4kemluZGV4LXN0aWNreTogICAgICAgICAgICAgICAgICAgICAxMDIwICFkZWZhdWx0O1xuJHppbmRleC1maXhlZDogICAgICAgICAgICAgICAgICAgICAgMTAzMCAhZGVmYXVsdDtcbiR6aW5kZXgtbW9kYWwtYmFja2Ryb3A6ICAgICAgICAgICAgIDEwNDAgIWRlZmF1bHQ7XG4kemluZGV4LW1vZGFsOiAgICAgICAgICAgICAgICAgICAgICAxMDUwICFkZWZhdWx0O1xuJHppbmRleC1wb3BvdmVyOiAgICAgICAgICAgICAgICAgICAgMTA2MCAhZGVmYXVsdDtcbiR6aW5kZXgtdG9vbHRpcDogICAgICAgICAgICAgICAgICAgIDEwNzAgIWRlZmF1bHQ7XG5cbi8vIE5hdnNcbiRuYXYtbGluay1wYWRkaW5nLXk6ICAgICAgICAgICAgICAgIC41NjI1cmVtICFkZWZhdWx0O1xuJG5hdi10YWJzLWxpbmstaG92ZXItY29sb3I6ICAgICAgICAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG4kbmF2LXRhYnMtbGluay1ob3Zlci1iZzogICAgICAgICAgICAgICAgICAgICAgJGJsdWUgIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuXG4kbmF2LXRhYnMtbGluay1mb2N1cy1ib3JkZXItY29sb3I6ICAgICAgICAgICAgJGJsdWUtZGFyayAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG4kbmF2LXRhYnMtbGluay1mb2N1cy1jb2xvcjogICAgICAgICAgICAgICAgICAgJHdoaXRlICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcbiRuYXYtdGFicy1saW5rLWZvY3VzLWJnOiAgICAgICAgICAgICAgICAgICAgICAkYmx1ZS1kYXJrICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcblxuLy8gTmF2YmFyXG4kbmF2YmFyLXBhZGRpbmcteTogICAgICAgICAgICAgICAgICAuNDM3NXJlbSAhZGVmYXVsdDtcbiRuYXZiYXItYnJhbmQtZm9udC1zaXplOiAgICAgICAgICAgICRmb250LXNpemUtYmFzZSAhZGVmYXVsdDtcbiRuYXZiYXItYnJhbmQtZm9udC13ZWlnaHQ6ICAgICAgICAgICRmb250LXdlaWdodC1tZWRpdW0gIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuXG4vLyBQYWdpbmF0aW9uXG5cbiRwYWdpbmF0aW9uLWhvdmVyLWNvbG9yOiAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcbiRwYWdpbmF0aW9uLWhvdmVyLWJnOiAgICAgICAgICAgICAgICRibHVlICFkZWZhdWx0O1xuJHBhZ2luYXRpb24taG92ZXItYm9yZGVyLWNvbG9yOiAgICAgJGJsdWUgIWRlZmF1bHQ7XG5cbiRwYWdpbmF0aW9uLWFjdGl2ZS1iZzogICAgICAgICAgICAgICRibHVlLWRhcmsgIWRlZmF1bHQ7XG4kcGFnaW5hdGlvbi1hY3RpdmUtYm9yZGVyLWNvbG9yOiAgICAkYmx1ZS1kYXJrICFkZWZhdWx0O1xuXG5cblxuLy8gSnVtYm90cm9uXG5cbi8vIENhcmRzXG5cbi8vIFRvb2x0aXBzXG5cbi8vIFBvcG92ZXJzXG5cbi8vIEJhZGdlc1xuXG4kYmFkZ2UtYm9yZGVyLXJhZGl1czogICAgICAgICAgICAgICAwICFkZWZhdWx0O1xuXG5cbi8vIE1vZGFsc1xuXG4vLyBQYWRkaW5nIGFwcGxpZWQgdG8gdGhlIG1vZGFsIGJvZHlcblxuJG1vZGFsLWNvbnRlbnQtYm9yZGVyLWNvbG9yOiAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJG1vZGFsLWNvbnRlbnQtYm9yZGVyLXJhZGl1czogICAgICAgMCAhZGVmYXVsdDtcblxuJG1vZGFsLWZvb3Rlci1ib3JkZXItd2lkdGg6ICAgICAgICAgMCAhZGVmYXVsdDtcbiRtb2RhbC1hc2lkZS13aWR0aDogICAgICAgICAgICAgICAgIDMyMHB4ICFkZWZhdWx0OyAvLyBTRUIgU3BlY2lmaWNcbiRtb2RhbC1hc2lkZS1sZy13aWR0aDogICAgICAgICAgICAgIG1hcF9nZXQoJGdyaWQtYnJlYWtwb2ludHMsICdtZCcpOyAvLyA4MDBweCAhZGVmYXVsdDsgLy8gU0VCIFNwZWNpZmljXG5cblxuLy8gQWxlcnRzXG4vL1xuLy8gRGVmaW5lIGFsZXJ0IGNvbG9ycywgYm9yZGVyIHJhZGl1cywgYW5kIHBhZGRpbmcuXG5cbiRhbGVydC1wYWRkaW5nLXg6ICAgICAgICAgICAgICAgICAgIC43NXJlbSAhZGVmYXVsdDtcbiRhbGVydC1ib3JkZXItcmFkaXVzOiAgICAgICAgICAgICAgICRib3JkZXItcmFkaXVzICFkZWZhdWx0O1xuJGFsZXJ0LWxpbmstZm9udC13ZWlnaHQ6ICAgICAgICAgICAgJGZvbnQtd2VpZ2h0LW1lZGl1bSAhZGVmYXVsdDsgLy81MDBcbiRhbGVydC1ib3JkZXItd2lkdGg6ICAgICAgICAgICAgICAgIDAgIWRlZmF1bHQ7XG4kYWxlcnQtaWNvbi13aWR0aDogICAgICAgICAgICAgICAgICAxLjEyNXJlbSAhZGVmYXVsdDsgLy8gU0VCIFNwZWNpZmljXG4kYWxlcnQtaWNvbi1oZWlnaHQ6ICAgICAgICAgICAgICAgICAxcmVtICFkZWZhdWx0OyAvLyBTRUIgU3BlY2lmaWNcblxuLy8gVG9hc3Qgbm90aWZpY2F0aW9uc1xuJHRvYXN0LWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICFkZWZhdWx0O1xuJHRvYXN0LWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgICAgJGFsZXJ0LWJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuJHRvYXN0LW1hcmdpbi1ib3R0b206ICAgICAgICAgICAgICAgLjVyZW0gIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuJHRvYXN0LXBhZGRpbmc6ICAgICAgICAgICAgICAgICAgICAgJGFsZXJ0LXBhZGRpbmcteCAhZGVmYXVsdDsgLy8gU0VCIFNwZWNpZmljXG4kdG9hc3Qtd2lkdGg6ICAgICAgICAgICAgICAgICAgICAgICAzMDBweCAhZGVmYXVsdDsgLy8gU0VCIFNwZWNpZmljXG4kdG9hc3Qtc2hhZG93OiAgICAgICAgICAgICAgICAgICAgICAwIDAgLjVyZW0gcmdiYSgwLCAwLCAwLCAwLjE1KSAhZGVmYXVsdDsgLy8gU0VCIFNwZWNpZmljXG4kdG9hc3QtdHJhbnNpdGlvbjogICAgICAgICAgICAgICAgICBjb2xvciAuMTVzIGVhc2UtaW4tb3V0LCBiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IC4xNXMgZWFzZS1pbi1vdXQgIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuXG5cbi8vIFByb2dyZXNzIGJhcnNcblxuLy8gTGlzdCBncm91cFxuJGxpc3QtZ3JvdXAtYnVsbGV0LWljb246IHN0ci1yZXBsYWNlKHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgMSAxJyUzRSUzQ3JlY3Qgd2lkdGg9JzEnIGhlaWdodD0nMScgc3R5bGU9J2ZpbGw6I3skZGFya307JyAvJTNFJTNDL3N2ZyUzRVwiKSwgXCIjXCIsIFwiJTIzXCIpICFkZWZhdWx0OyAvLyBTRUIgU3BlY2lmaWNcbiRsaXN0LWdyb3VwLWNoZWNrLWljb246IHN0ci1yZXBsYWNlKHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgNDQ4IDUxMiclM0UlM0NwYXRoIGZpbGw9JyN7JGdyZWVufScgZD0nTTQxMy41MDUgOTEuOTUxTDEzMy40OSAzNzEuOTY2bC05OC45OTUtOTguOTk1Yy00LjY4Ni00LjY4Ni0xMi4yODQtNC42ODYtMTYuOTcxIDBMNi4yMTEgMjg0LjI4NGMtNC42ODYgNC42ODYtNC42ODYgMTIuMjg0IDAgMTYuOTcxbDExOC43OTQgMTE4Ljc5NGM0LjY4NiA0LjY4NiAxMi4yODQgNC42ODYgMTYuOTcxIDBsMjk5LjgxMy0yOTkuODEzYzQuNjg2LTQuNjg2IDQuNjg2LTEyLjI4NCAwLTE2Ljk3MWwtMTEuMzE0LTExLjMxNGMtNC42ODYtNC42ODYtMTIuMjg0LTQuNjg2LTE2Ljk3IDB6JyBjbGFzcz0nc3QwJy8lM0UlM0Mvc3ZnJTNFXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7IC8vIFNFQiBTcGVjaWZpY1xuJGxpc3QtZ3JvdXAtbWFyZ2luLWJvdHRvbTogMXJlbSAhZGVmYXVsdDsgLy8gU0VCIFNwZWNpZmljXG4kbGlzdC1ncm91cC1iZzogICAgICAgICAgICAgICAgICAgICAkZ3JheS00MDAgIWRlZmF1bHQ7XG4kbGlzdC1ncm91cC1ob3Zlci1iZzogICAgICAgICAgICAgICAkYmx1ZSAhZGVmYXVsdDtcbiRsaXN0LWdyb3VwLWFjdGlvbi1ob3Zlci1jb2xvcjogICAgICR3aGl0ZSAhZGVmYXVsdDtcbiRsaXN0LWdyb3VwLWFjdGlvbi1ob3Zlci1iZzogICAgICAgICRncmF5LTEwMCAhZGVmYXVsdDtcbiRsaXN0LWdyb3VwLWFjdGlvbi1hY3RpdmUtYmc6ICAgICAgICRibHVlLWRhcmsgIWRlZmF1bHQ7XG4kbGlzdC1ncm91cC1hY3Rpb24tYWN0aXZlLWNvbG9yOiAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kbGlzdC1ncm91cC1hY3RpdmUtYmc6ICAgICAgICAgICAgICAkZ3JlZW4gIWRlZmF1bHQ7XG4kbGlzdC1ncm91cC1kaXNhYmxlZC1jb2xvcjogICAgICAgICAkZ3JheS01MDAgIWRlZmF1bHQ7XG4kbGlzdC1ncm91cC1kaXNhYmxlZC1iZzogICAgICAgICAgICAkZ3JheS0yMDAgIWRlZmF1bHQ7XG5cblxuLy8gSW1hZ2UgdGh1bWJuYWlsc1xuXG4vLyBGaWd1cmVzXG5cbi8vIEJyZWFkY3J1bWJzXG4kYnJlYWRjcnVtYi1wYWRkaW5nLXk6ICAgICAgICAgICAgICAuNzVyZW0gIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1wYWRkaW5nLXg6ICAgICAgICAgICAgICAwICFkZWZhdWx0O1xuJGJyZWFkY3J1bWItYmc6ICAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQgIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1kaXZpZGVyLWNvbG9yOiAgICAgICAgICAkYmxhY2sgIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1hY3RpdmUtY29sb3I6ICAgICAgICAgICAkYmxhY2sgIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1hY3RpdmUtZm9udC13ZWlnaHQ6ICAgICAkZm9udC13ZWlnaHQtbWVkaXVtICFkZWZhdWx0OyAvLyBTRUIgU3BlY2lmaWNcbiRicmVhZGNydW1iLWJvcmRlci1yYWRpdXM6ICAgICAgICAgIDAgIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1kaXZpZGVyOiAgICAgICAgICAgICAgICBzdHItcmVwbGFjZSh1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgZmlsbD0nI3skYnJlYWRjcnVtYi1kaXZpZGVyLWNvbG9yfScgdmlld0JveD0nMCAwIDI1NiA1MTInJTNFJTNDcGF0aCBkPSdNMTcuNTI1IDM2LjQ2NWwtNy4wNzEgNy4wN2MtNC42ODYgNC42ODYtNC42ODYgMTIuMjg0IDAgMTYuOTcxTDIwNS45NDcgMjU2IDEwLjQ1NCA0NTEuNDk0Yy00LjY4NiA0LjY4Ni00LjY4NiAxMi4yODQgMCAxNi45NzFsNy4wNzEgNy4wN2M0LjY4NiA0LjY4NiAxMi4yODQgNC42ODYgMTYuOTcgMGwyMTEuMDUxLTIxMS4wNWM0LjY4Ni00LjY4NiA0LjY4Ni0xMi4yODQgMC0xNi45NzFMMzQuNDk1IDM2LjQ2NWMtNC42ODYtNC42ODctMTIuMjg0LTQuNjg3LTE2Ljk3IDB6Jy8lM0UlM0Mvc3ZnJTNFXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuJGJyZWFkY3J1bWItYmFjay1pY29uOiAgICAgICAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIGZpbGw9JyN7JGJyZWFkY3J1bWItZGl2aWRlci1jb2xvcn0nIHZpZXdCb3g9JzAgMCAyNTYgNTEyJyUzRSUzQ3BhdGggZD0nTTIzOC40NzUgNDc1LjUzNWw3LjA3MS03LjA3YzQuNjg2LTQuNjg2IDQuNjg2LTEyLjI4NCAwLTE2Ljk3MUw1MC4wNTMgMjU2IDI0NS41NDYgNjAuNTA2YzQuNjg2LTQuNjg2IDQuNjg2LTEyLjI4NCAwLTE2Ljk3MWwtNy4wNzEtNy4wN2MtNC42ODYtNC42ODYtMTIuMjg0LTQuNjg2LTE2Ljk3IDBMMTAuNDU0IDI0Ny41MTVjLTQuNjg2IDQuNjg2LTQuNjg2IDEyLjI4NCAwIDE2Ljk3MWwyMTEuMDUxIDIxMS4wNWM0LjY4NiA0LjY4NiAxMi4yODQgNC42ODYgMTYuOTctLjAwMXonLyUzRSUzQy9zdmclM0VcIiksIFwiI1wiLCBcIiUyM1wiKSAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG4kYnJlYWRjcnVtYi1kaXZpZGVyLXdpZHRoOiAgICAgICAgICAxNXB4ICFkZWZhdWx0OyAvLyBTRUIgU3BlY2lmaWNcblxuXG4vLyBDbG9zZVxuXG4vLyBDb2RlXG5cbi8vIFByaW50aW5nXG5cbkBpbXBvcnQgXCJib290c3RyYXAtY29yZS9mdW5jdGlvbnNcIjtcbkBpbXBvcnQgXCJib290c3RyYXAtY29yZS92YXJpYWJsZXNcIjtcblxuLy8gU2Nyb2xsYmFyXG4kc2Nyb2xsYmFyLXRyYWNrLWJnOiAgJGdyYXktMTAwO1xuJHNjcm9sbGJhci10aHVtYi1iZzogICRncmF5LTQwMDtcbiRzY3JvbGxiYXItdHJhY2stZGFyay1iZzogICRkYXJrO1xuJHNjcm9sbGJhci10aHVtYi1kYXJrLWJnOiAgJGdyYXktOTAwO1xuJHNjcm9sbGJhci10aHVtYi1hY3RpdmUtYmc6ICRibHVlO1xuJHNjcm9sbGJhci10aGlja25lc3M6ICAgICAxMHB4O1xuXG4vLyBBY2NvcmRpb25cblxuJGFjY29yZGlvbi1ib3JkZXItY29sb3I6ICAgICR0YWJsZS1ib3JkZXItY29sb3IgIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuJGFjY29yZGlvbi1ib3JkZXItd2lkdGg6ICAgICR0YWJsZS1ib3JkZXItd2lkdGggIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuJGFjY29yZGlvbi1oZWFkZXItcGFkZGluZzogIDAgLjc1cmVtICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcbiRhY2NvcmRpb24tYm9keS1wYWRkaW5nOiAgICAkdGFibGUtY2VsbC1wYWRkaW5nICFkZWZhdWx0OyAvLyBTRUIgc3BlY2lmaWNcbiRhY2NvcmRpb24taXRlbS1wYWRkaW5nLXk6ICAuNTYyNXJlbSAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG4kYWNjb3JkaW9uLWl0ZW0tcGFkZGluZy14OiAgMCAhZGVmYXVsdDsgLy8gU0VCIHNwZWNpZmljXG4kYWNjb3JkaW9uLWJvZHktYmc6ICAgICAgICAgdHJhbnNwYXJlbnQgIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuJGFjY29yZGlvbi1zaXplOiAgICAgICAgICAgIC44NzVyZW0gIWRlZmF1bHQ7IC8vIFNFQiBzcGVjaWZpY1xuIiwiLy8gQnJlYWtwb2ludCB2aWV3cG9ydCBzaXplcyBhbmQgbWVkaWEgcXVlcmllcy5cbi8vXG4vLyBCcmVha3BvaW50cyBhcmUgZGVmaW5lZCBhcyBhIG1hcCBvZiAobmFtZTogbWluaW11bSB3aWR0aCksIG9yZGVyIGZyb20gc21hbGwgdG8gbGFyZ2U6XG4vL1xuLy8gICAgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KVxuLy9cbi8vIFRoZSBtYXAgZGVmaW5lZCBpbiB0aGUgYCRncmlkLWJyZWFrcG9pbnRzYCBnbG9iYWwgdmFyaWFibGUgaXMgdXNlZCBhcyB0aGUgYCRicmVha3BvaW50c2AgYXJndW1lbnQgYnkgZGVmYXVsdC5cblxuLy8gTmFtZSBvZiB0aGUgbmV4dCBicmVha3BvaW50LCBvciBudWxsIGZvciB0aGUgbGFzdCBicmVha3BvaW50LlxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbmV4dChzbSlcbi8vICAgIG1kXG4vLyAgICA+PiBicmVha3BvaW50LW5leHQoc20sICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweCkpXG4vLyAgICBtZFxuLy8gICAgPj4gYnJlYWtwb2ludC1uZXh0KHNtLCAkYnJlYWtwb2ludC1uYW1lczogKHhzIHNtIG1kIGxnIHhsKSlcbi8vICAgIG1kXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1uZXh0KCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludC1uYW1lczogbWFwLWtleXMoJGJyZWFrcG9pbnRzKSkge1xuICAkbjogaW5kZXgoJGJyZWFrcG9pbnQtbmFtZXMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbiAhPSBudWxsIGFuZCAkbiA8IGxlbmd0aCgkYnJlYWtwb2ludC1uYW1lcyksIG50aCgkYnJlYWtwb2ludC1uYW1lcywgJG4gKyAxKSwgbnVsbCk7XG59XG5cbi8vIE1pbmltdW0gYnJlYWtwb2ludCB3aWR0aC4gTnVsbCBmb3IgdGhlIHNtYWxsZXN0IChmaXJzdCkgYnJlYWtwb2ludC5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LW1pbihzbSwgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KSlcbi8vICAgIDU3NnB4XG5AZnVuY3Rpb24gYnJlYWtwb2ludC1taW4oJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgJG1pbjogbWFwLWdldCgkYnJlYWtwb2ludHMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbWluICE9IDAsICRtaW4sIG51bGwpO1xufVxuXG4vLyBNYXhpbXVtIGJyZWFrcG9pbnQgd2lkdGguIE51bGwgZm9yIHRoZSBsYXJnZXN0IChsYXN0KSBicmVha3BvaW50LlxuLy8gVGhlIG1heGltdW0gdmFsdWUgaXMgY2FsY3VsYXRlZCBhcyB0aGUgbWluaW11bSBvZiB0aGUgbmV4dCBvbmUgbGVzcyAwLjAycHhcbi8vIHRvIHdvcmsgYXJvdW5kIHRoZSBsaW1pdGF0aW9ucyBvZiBgbWluLWAgYW5kIGBtYXgtYCBwcmVmaXhlcyBhbmQgdmlld3BvcnRzIHdpdGggZnJhY3Rpb25hbCB3aWR0aHMuXG4vLyBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL21lZGlhcXVlcmllcy00LyNtcS1taW4tbWF4XG4vLyBVc2VzIDAuMDJweCByYXRoZXIgdGhhbiAwLjAxcHggdG8gd29yayBhcm91bmQgYSBjdXJyZW50IHJvdW5kaW5nIGJ1ZyBpbiBTYWZhcmkuXG4vLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE3ODI2MVxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbWF4KHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgNzY3Ljk4cHhcbkBmdW5jdGlvbiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xuICAkbmV4dDogYnJlYWtwb2ludC1uZXh0KCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICBAcmV0dXJuIGlmKCRuZXh0LCBicmVha3BvaW50LW1pbigkbmV4dCwgJGJyZWFrcG9pbnRzKSAtIC4wMiwgbnVsbCk7XG59XG5cbi8vIFJldHVybnMgYSBibGFuayBzdHJpbmcgaWYgc21hbGxlc3QgYnJlYWtwb2ludCwgb3RoZXJ3aXNlIHJldHVybnMgdGhlIG5hbWUgd2l0aCBhIGRhc2ggaW4gZnJvbnQuXG4vLyBVc2VmdWwgZm9yIG1ha2luZyByZXNwb25zaXZlIHV0aWxpdGllcy5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LWluZml4KHhzLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgXCJcIiAgKFJldHVybnMgYSBibGFuayBzdHJpbmcpXG4vLyAgICA+PiBicmVha3BvaW50LWluZml4KHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgXCItc21cIlxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtaW5maXgoJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgQHJldHVybiBpZihicmVha3BvaW50LW1pbigkbmFtZSwgJGJyZWFrcG9pbnRzKSA9PSBudWxsLCBcIlwiLCBcIi0jeyRuYW1lfVwiKTtcbn1cblxuLy8gTWVkaWEgb2YgYXQgbGVhc3QgdGhlIG1pbmltdW0gYnJlYWtwb2ludCB3aWR0aC4gTm8gcXVlcnkgZm9yIHRoZSBzbWFsbGVzdCBicmVha3BvaW50LlxuLy8gTWFrZXMgdGhlIEBjb250ZW50IGFwcGx5IHRvIHRoZSBnaXZlbiBicmVha3BvaW50IGFuZCB3aWRlci5cbkBtaXhpbiBtZWRpYS1icmVha3BvaW50LXVwKCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzKSB7XG4gICRtaW46IGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICBAaWYgJG1pbiB7XG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICRtaW4pIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gTWVkaWEgb2YgYXQgbW9zdCB0aGUgbWF4aW11bSBicmVha3BvaW50IHdpZHRoLiBObyBxdWVyeSBmb3IgdGhlIGxhcmdlc3QgYnJlYWtwb2ludC5cbi8vIE1ha2VzIHRoZSBAY29udGVudCBhcHBseSB0byB0aGUgZ2l2ZW4gYnJlYWtwb2ludCBhbmQgbmFycm93ZXIuXG5AbWl4aW4gbWVkaWEtYnJlYWtwb2ludC1kb3duKCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzKSB7XG4gICRtYXg6IGJyZWFrcG9pbnQtbWF4KCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICBAaWYgJG1heCB7XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtYXgpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gTWVkaWEgdGhhdCBzcGFucyBtdWx0aXBsZSBicmVha3BvaW50IHdpZHRocy5cbi8vIE1ha2VzIHRoZSBAY29udGVudCBhcHBseSBiZXR3ZWVuIHRoZSBtaW4gYW5kIG1heCBicmVha3BvaW50c1xuQG1peGluIG1lZGlhLWJyZWFrcG9pbnQtYmV0d2VlbigkbG93ZXIsICR1cHBlciwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xuICAkbWluOiBicmVha3BvaW50LW1pbigkbG93ZXIsICRicmVha3BvaW50cyk7XG4gICRtYXg6IGJyZWFrcG9pbnQtbWF4KCR1cHBlciwgJGJyZWFrcG9pbnRzKTtcblxuICBAaWYgJG1pbiAhPSBudWxsIGFuZCAkbWF4ICE9IG51bGwge1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiAkbWluKSBhbmQgKG1heC13aWR0aDogJG1heCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRtYXggPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC11cCgkbG93ZXIsICRicmVha3BvaW50cykge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRtaW4gPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC1kb3duKCR1cHBlciwgJGJyZWFrcG9pbnRzKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cblxuLy8gTWVkaWEgYmV0d2VlbiB0aGUgYnJlYWtwb2ludCdzIG1pbmltdW0gYW5kIG1heGltdW0gd2lkdGhzLlxuLy8gTm8gbWluaW11bSBmb3IgdGhlIHNtYWxsZXN0IGJyZWFrcG9pbnQsIGFuZCBubyBtYXhpbXVtIGZvciB0aGUgbGFyZ2VzdCBvbmUuXG4vLyBNYWtlcyB0aGUgQGNvbnRlbnQgYXBwbHkgb25seSB0byB0aGUgZ2l2ZW4gYnJlYWtwb2ludCwgbm90IHZpZXdwb3J0cyBhbnkgd2lkZXIgb3IgbmFycm93ZXIuXG5AbWl4aW4gbWVkaWEtYnJlYWtwb2ludC1vbmx5KCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzKSB7XG4gICRtaW46IGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICAkbWF4OiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzKTtcblxuICBAaWYgJG1pbiAhPSBudWxsIGFuZCAkbWF4ICE9IG51bGwge1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiAkbWluKSBhbmQgKG1heC13aWR0aDogJG1heCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRtYXggPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC11cCgkbmFtZSwgJGJyZWFrcG9pbnRzKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJG1pbiA9PSBudWxsIHtcbiAgICBAaW5jbHVkZSBtZWRpYS1icmVha3BvaW50LWRvd24oJG5hbWUsICRicmVha3BvaW50cykge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG4iLCIkbmdzZWItZG9jcy1tZW51LXdpZHRoOiAxNnJlbTtcbiJdfQ== */\"","import {Component, Input, OnInit} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {MenuService} from '../menu/menu.service';\nimport {MenuQuery} from '../menu/menu.query';\nimport {MenuItem} from '../../interfaces/menu-item';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  animations: [\n    trigger('scrollAnimation', [\n      state('show', style({\n        opacity: 1,\n        transform: 'translateY(0)'\n      })),\n      state('hide',   style({\n        opacity: 0,\n        transform: 'translateY(-100px)'\n      })),\n      transition('show => hide', animate('700ms ease-out')),\n      transition('hide => show', animate('700ms ease-in'))\n    ])\n  ]\n})\nexport class HeaderComponent implements OnInit {\n\n  activeTab = 'components';\n  private _scrollPosition = 0;\n  stickyHeader = 'hide';\n  $isActive: Observable<boolean>;\n  $menuItems: Observable<Array<MenuItem>>;\n\n  get scrollPosition(): number {\n    return this._scrollPosition;\n  }\n\n  @Input() set scrollPosition(value: number) {\n    this._scrollPosition = value;\n\n    if (this.scrollPosition >= 100) {\n      this.stickyHeader = 'show';\n    } else {\n      this.stickyHeader = 'hide';\n    }\n  }\n  constructor(private menuService: MenuService, private menuQuery: MenuQuery) { }\n\n  ngOnInit() {\n    this.$isActive = this.menuQuery.$isMenuActive;\n    this.$menuItems = this.menuQuery.$menuItems;\n  }\n\n  showMenu(tab: any) {\n    // this.menuService.switchTab(tab);\n    this.activeTab = tab;\n  }\n\n  toggleMenu() {\n    this.menuService.toggleMenu();\n  }\n}\n","module.exports = \"<h2 class=\\\"text-capitalize mt-3 mt-lg-4\\\">Installation</h2>\\n<section class=\\\"card mt-2 mt-lg-3 mx-n3 mx-sm-0\\\">\\n  <div class=\\\"card-body pt-3\\\">\\n    <p>Placeholder for content</p>\\n  </div>\\n</section>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9uZy1jb21wb25lbnRzLWRvY3Mvc3JjL2FwcC9jb21wb25lbnRzL2luc3RhbGxhdGlvbi9pbnN0YWxsYXRpb24uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-installation',\n  templateUrl: './installation.component.html',\n  styleUrls: ['./installation.component.scss']\n})\nexport class InstallationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<svg class=\\\"seb-logo\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 800 800\\\">\\n  <path d=\\\"M0 0h800v800H0z\\\" fill=\\\"#60cd18\\\"/>\\n  <path d=\\\"M290.55 348.35l-25.87 19.32c-12.22-10.51-28-12.57-36.65-12.57s-18 2.51-19.37 8.82c-1.38 6.12 4.31 10.88 14.08 13.53 11.14 3 21.29 5.66 36.92 10.12 23.24 6.63 39.13 16.69 39.13 40 0 32.14-28.53 48.8-66.75 48.8s-64.26-19.91-72-29.2l27.35-20.45c19.21 16.75 32.57 19.11 43.74 19.11 12.81 0 24.79-2.75 26.33-10 1.25-5.82-3.58-10.45-14.49-13-12.35-2.85-22.77-5.14-34.4-8.2-31.52-8.27-40.41-26.6-40.41-43.06 0-22.67 21.1-45.95 59.69-45.95 39.57 0 62.74 22.67 62.74 22.67m164.9-20.4H340.12V472.1h117.45v-33.24h-76.94v-23.22h53v-31.8h-53v-23h74.83zM310.27 505.37h9V294.63h-9zm162.45 0h9V294.63h-9zm29.8-33.27h92.64c24.77 0 44.84-14.93 44.84-38.84 0-18.65-12.21-31-29.32-36.47a9.6 9.6 0 0 0-1.66-.21 10.36 10.36 0 0 0 1.66-.29c9.8-3.88 20.66-14.21 20.66-31.8 0-22.31-19.74-36.54-44.1-36.54h-84.72zm40.7-114.17h32.36c7.45 0 13.48 5.88 13.48 12.64s-6 12.66-13.48 12.66h-32.36zm39.58 82.13h-39.58v-26.29h39.58a13.15 13.15 0 0 1 0 26.28z\\\" fill=\\\"#fff\\\"/>\\n</svg>\\n\"","module.exports = \".seb-logo {\\n  height: 56px;\\n  width: 56px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yaGovRGV2L3NlYmdyb3VwL25nLWNvbXBvbmVudHMvcHJvamVjdHMvbmctY29tcG9uZW50cy1kb2NzL3NyYy9hcHAvY29tcG9uZW50cy9sb2dvL2xvZ28uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFXO0VBQ1gsV0FBVyxFQUFBIiwiZmlsZSI6InByb2plY3RzL25nLWNvbXBvbmVudHMtZG9jcy9zcmMvYXBwL2NvbXBvbmVudHMvbG9nby9sb2dvLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnNlYi1sb2dvIHtcbiAgaGVpZ2h0OjU2cHg7XG4gIHdpZHRoOiA1NnB4O1xufVxuIl19 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-logo',\n  templateUrl: './logo.component.html',\n  styleUrls: ['./logo.component.scss']\n})\nexport class LogoComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { MenuStore, NavigationState } from './menu.store';\n\n@Injectable({ providedIn: 'root' })\nexport class MenuQuery extends Query<NavigationState> {\n  $isMenuActive = this.select('isMenuActive');\n  $menuItems = this.select('menuItems');\n\n  constructor(protected store: MenuStore) {\n    super(store);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { MenuStore } from './menu.store';\n\n@Injectable({ providedIn: 'root' })\nexport class MenuService {\n\n  constructor(private menuStore: MenuStore) {\n  }\n\n  updateMenuItems(menuItems: any) {\n    this.menuStore.update(currentState => ({menuItems}));\n  }\n\n  toggleMenu(state?: boolean) {\n    this.menuStore.update(currentState => ({\n      isMenuActive: typeof state !== 'undefined' ? state : !currentState.isMenuActive\n    }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface NavigationState {\n   isMenuActive: boolean;\n   menuItems: Array<any>;\n}\n\nexport function createInitialState(): NavigationState {\n  return {\n    isMenuActive: true,\n    menuItems: []\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'navigation' })\nexport class MenuStore extends Store<NavigationState> {\n\n  constructor() {\n    super(createInitialState());\n  }\n\n}\n","module.exports = \"<aside class=\\\"side-nav bg-dark\\\" [ngClass]=\\\"{'active': $isActive | async}\\\">\\n  <div class=\\\"row no-gutters mb-3\\\">\\n    <div class=\\\"col-auto\\\">\\n      <app-logo></app-logo>\\n    </div>\\n    <div class=\\\"col align-self-center pl-3\\\">\\n      <h5 class=\\\"text-white mb-0\\\">ng-components</h5>\\n    </div>\\n    <div class=\\\"col-auto align-self-center px-3 d-lg-none\\\" (click)=\\\"toggleMenu()\\\">\\n      <i class=\\\"fal fa-times fa-lg text-white\\\"></i>\\n      <fa-icon icon=\\\"times\\\" class=\\\"text-white\\\" size=\\\"lg\\\"></fa-icon>\\n    </div>\\n  </div>\\n  <ng-container *ngFor=\\\"let menuGroup of $menuGroups | async\\\">\\n    <label class=\\\"text-capitalize small text-muted ml-3\\\"><fa-icon [icon]=\\\"menuGroup.icon\\\" class=\\\"mr-2\\\"></fa-icon>{{menuGroup.text}}</label>\\n    <ul class=\\\"nav flex-column mb-3\\\">\\n      <li *ngFor=\\\"let menuItem of menuGroup.children\\\" class=\\\"nav-item\\\">\\n        <a class=\\\"text-capitalize nav-link\\\" [routerLink]=\\\"menuItem.path\\\" [routerLinkActive]=\\\"'active'\\\">{{menuItem.text}}</a>\\n      </li>\\n    </ul>\\n  </ng-container>\\n</aside>\\n\\n\"","module.exports = \"/**\\n * Add one or more transitions\\n *\\n * @example\\n * @include add-transition('slideInUp');\\n * @include add-transition(('slideInUp','fadeIn'))\\n */\\n.side-nav {\\n  -webkit-transform: translate3d(-16rem, 0, 0);\\n          transform: translate3d(-16rem, 0, 0);\\n  transition: -webkit-transform 400ms ease-in-out;\\n  transition: transform 400ms ease-in-out;\\n  transition: transform 400ms ease-in-out, -webkit-transform 400ms ease-in-out;\\n  background: #343434;\\n  width: 16rem;\\n  height: 100vh;\\n  position: fixed;\\n  z-index: 1030;\\n  left: 0;\\n  top: 0; }\\n.side-nav.active {\\n    -webkit-transform: translate3d(0, 0, 0);\\n            transform: translate3d(0, 0, 0);\\n    display: block;\\n    z-index: 1030; }\\n@media (max-width: 767.98px) {\\n  .side-nav.active {\\n    display: none; } }\\n@media (min-width: 992px) {\\n  .side-nav {\\n    -webkit-transform: translate3d(0, 0, 0);\\n            transform: translate3d(0, 0, 0); } }\\n.seb-logo {\\n  height: 56px;\\n  width: 56px; }\\n.nav-link {\\n  color: #fff; }\\n.list-group-menu .list-group-item.active {\\n  background: #60cd18; }\\n.list-group-menu .list-group-item a {\\n  color: #fff; }\\n.nav-item .nav-link {\\n  transition: background-color 0.15s linear; }\\n.nav-item:hover .nav-link {\\n  background: rgba(96, 205, 24, 0.25); }\\n.nav-item .nav-link.active {\\n  background: #60cd18; }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, OnInit } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {MenuItem} from '../../interfaces/menu-item';\nimport {MenuService} from './menu.service';\nimport {MenuQuery} from './menu.query';\n\n@Component({\n  selector: 'app-side-menu',\n  templateUrl: './side-menu.component.html',\n  styleUrls: ['./side-menu.component.scss']\n})\nexport class SideMenuComponent implements OnInit {\n\n  public $menuGroups: Observable<Array<MenuItem>>;\n  public $isActive: Observable<boolean>;\n\n  constructor(private menuServiceService: MenuService,\n              private menuQuery: MenuQuery) {\n    this.$isActive = this.menuQuery.$isMenuActive;\n  }\n\n  ngOnInit() {\n    this.$menuGroups = this.menuQuery.$menuItems;\n\n  }\n\n  toggleMenu(state?: boolean) {\n    this.menuServiceService.toggleMenu();\n  }\n\n}\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExamplePageComponent } from '../../../components/example-page/example-page.component';\nimport { ButtonsComponent } from './examples/buttons/buttons.component';\nimport {SebButtonModule} from '@sebgroup/ng-components';\nimport {ExampleListComponent} from '../../../components/example-page/example-list/example-list.component';\nimport {ApiListComponent} from '../../../components/example-page/api-list/api-list.component';\nimport {Route} from '@angular/router';\n\n\nexport const ROUTES: Array<Route> = [\n  { path: '', pathMatch: 'full', redirectTo: 'examples' },\n  {\n    path: '',\n    component: ExamplePageComponent,\n    children: [\n      { path: 'examples',\n        component: ExampleListComponent,\n        children: [{\n          path: 'button',\n          component: ButtonsComponent,\n          data: {\n            title: 'Button directive',\n            description: 'Additional description for example (optional)',\n            sources: [{\n              name: 'buttons.component.html',\n              // @ts-ignore\n              src: require('!raw-loader!./examples/buttons/buttons.component.html'),\n              lang: 'markup'\n            }, {\n              name: 'buttons.component.ts',\n              // @ts-ignore\n              src: require('!raw-loader!./examples/buttons/buttons.component.ts'),\n              lang: 'ts'\n            }]\n          }\n        }, {\n          path: 'another-example',\n          component: ButtonsComponent,\n          data: {\n            title: 'Another button example (same component)',\n            description: `Same component used for the sake of showing how multiple examples can be set up. It's also possible to add html like a <a href=\"http://www.seb.se\" target=\"blank\">link</a>.`,\n            sources: [{\n              name: 'buttons.component.html',\n              src: `<div>Some other <strong class=\"fancy-class\">inline</strong> example markup</div>`,\n              lang: 'markup'\n            }, {\n              name: 'buttons.component.js',\n              src: `foo(bar: any) => {\n                console.log(bar);\n              }`,\n              lang: 'js'\n            }, {\n              name: 'buttons.component.css',\n              src: `\n                .fancy-class {\n                  color: hotpink !important;\n                }\n              `,\n              lang: 'css'\n            }]\n          }\n        }]},\n      { path: 'api', component: ApiListComponent }\n    ]\n  }\n];\n\n\n\n@NgModule({\n  declarations: [ButtonsComponent],\n  imports: [\n    CommonModule,\n    SebButtonModule\n  ]\n})\nexport class ButtonsModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9uZy1jb21wb25lbnRzLWRvY3Mvc3JjL2FwcC9leGFtcGxlcy9jb21wb25lbnRzL2J1dHRvbnMvZXhhbXBsZXMvYnV0dG9ucy9idXR0b25zLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-buttons',\n  templateUrl: './buttons.component.html',\n  styleUrls: ['./buttons.component.scss']\n})\nexport class ButtonsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".modal {\\n  display: block;\\n  position: static; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yaGovRGV2L3NlYmdyb3VwL25nLWNvbXBvbmVudHMvcHJvamVjdHMvbmctY29tcG9uZW50cy1kb2NzL3NyYy9hcHAvZXhhbXBsZXMvY29tcG9uZW50cy9tb2RhbC9leGFtcGxlcy9tb2RhbC9tb2RhbC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0IsRUFBQSIsImZpbGUiOiJwcm9qZWN0cy9uZy1jb21wb25lbnRzLWRvY3Mvc3JjL2FwcC9leGFtcGxlcy9jb21wb25lbnRzL21vZGFsL2V4YW1wbGVzL21vZGFsL21vZGFsLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1vZGFsIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiBzdGF0aWM7XG59XG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss']\n})\nexport class ModalComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {ModalComponent} from './examples/modal/modal.component';\nimport {ExamplePageComponent} from '../../../components/example-page/example-page.component';\nimport {ExampleListComponent} from '../../../components/example-page/example-list/example-list.component';\nimport {ApiListComponent} from '../../../components/example-page/api-list/api-list.component';\n\nexport const ROUTES = [\n  { path: '', pathMatch: 'full', redirectTo: 'examples' },\n  {\n    path: '',\n    component: ExamplePageComponent,\n    children: [\n      { path: 'examples',\n        component: ExampleListComponent,\n        children: [{\n          path: 'modal',\n          component: ModalComponent,\n          data: {\n            title: 'Modal component',\n            description: 'Additional description for example (optional)',\n            sources: [{\n              name: 'modal.component.html',\n              // @ts-ignore\n              src: require('!raw-loader!./examples/modal/modal.component.html'),\n              lang: 'markup'\n            }, {\n              name: 'modal.component.ts',\n              // @ts-ignore\n              src: require('!raw-loader!./examples/modal/modal.component.ts'),\n              lang: 'ts'\n            }]\n          }\n        }]},\n      { path: 'api', component: ApiListComponent }\n    ]\n  }\n];\n\n@NgModule({\n  declarations: [\n    ModalComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class ModalModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonsModule } from './components/buttons/buttons.module';\nimport { ModalModule } from './components/modal/modal.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    ButtonsModule,\n    ModalModule\n  ]\n})\nexport class ExamplesModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  version: (() => {\n    let version = '';\n    try {\n      // @ts-ignore\n      version = require('../../dist/lib/package.json').version; } catch (e) {version = 'n/a';\n    }\n    return version;\n  })(),\n  travis_build_number: '__TRAVIS_BUILD_NUMBER__'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}